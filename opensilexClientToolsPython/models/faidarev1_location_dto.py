# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class Faidarev1LocationDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abbreviation': 'str',
        'abreviation': 'str',
        'additional_info': 'dict(str, str)',
        'altitude': 'float',
        'country_code': 'str',
        'country_name': 'str',
        'documentation_url': 'str',
        'institute_address': 'str',
        'institute_adress': 'str',
        'institute_name': 'str',
        'latitude': 'float',
        'location_db_id': 'str',
        'location_name': 'str',
        'name': 'str',
        'location_type': 'str',
        'longitude': 'float'
    }

    attribute_map = {
        'abbreviation': 'abbreviation',
        'abreviation': 'abreviation',
        'additional_info': 'additionalInfo',
        'altitude': 'altitude',
        'country_code': 'countryCode',
        'country_name': 'countryName',
        'documentation_url': 'documentationURL',
        'institute_address': 'instituteAddress',
        'institute_adress': 'instituteAdress',
        'institute_name': 'instituteName',
        'latitude': 'latitude',
        'location_db_id': 'locationDbId',
        'location_name': 'locationName',
        'name': 'name',
        'location_type': 'locationType',
        'longitude': 'longitude'
    }
    def __init__(self,
        abbreviation : 'str' = None,
        abreviation : 'str' = None,
        additional_info : 'Dict[str, str]' = None,
        altitude : 'float' = None,
        country_code : 'str' = None,
        country_name : 'str' = None,
        documentation_url : 'str' = None,
        institute_address : 'str' = None,
        institute_adress : 'str' = None,
        institute_name : 'str' = None,
        latitude : 'float' = None,
        location_db_id : 'str' = None,
        location_name : 'str' = None,
        name : 'str' = None,
        location_type : 'str' = None,
        longitude : 'float' = None):  # noqa: E501
        """Faidarev1LocationDTO - a model defined in Swagger"""  # noqa: E501

        self._abbreviation = None
        self._abreviation = None
        self._additional_info = None
        self._altitude = None
        self._country_code = None
        self._country_name = None
        self._documentation_url = None
        self._institute_address = None
        self._institute_adress = None
        self._institute_name = None
        self._latitude = None
        self._location_db_id = None
        self._location_name = None
        self._name = None
        self._location_type = None
        self._longitude = None
        self.discriminator = None

        if abbreviation is not None:
            self.abbreviation = abbreviation
        if abreviation is not None:
            self.abreviation = abreviation
        if additional_info is not None:
            self.additional_info = additional_info
        if altitude is not None:
            self.altitude = altitude
        if country_code is not None:
            self.country_code = country_code
        if country_name is not None:
            self.country_name = country_name
        if documentation_url is not None:
            self.documentation_url = documentation_url
        if institute_address is not None:
            self.institute_address = institute_address
        if institute_adress is not None:
            self.institute_adress = institute_adress
        if institute_name is not None:
            self.institute_name = institute_name
        if latitude is not None:
            self.latitude = latitude
        if location_db_id is not None:
            self.location_db_id = location_db_id
        if location_name is not None:
            self.location_name = location_name
        if name is not None:
            self.name = name
        if location_type is not None:
            self.location_type = location_type
        if longitude is not None:
            self.longitude = longitude

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Faidarev1LocationDTO.  # noqa: E501


        :return: The abbreviation of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Faidarev1LocationDTO.


        :param abbreviation: The abbreviation of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def abreviation(self):
        """Gets the abreviation of this Faidarev1LocationDTO.  # noqa: E501


        :return: The abreviation of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._abreviation

    @abreviation.setter
    def abreviation(self, abreviation):
        """Sets the abreviation of this Faidarev1LocationDTO.


        :param abreviation: The abreviation of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._abreviation = abreviation

    @property
    def additional_info(self):
        """Gets the additional_info of this Faidarev1LocationDTO.  # noqa: E501


        :return: The additional_info of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this Faidarev1LocationDTO.


        :param additional_info: The additional_info of this Faidarev1LocationDTO.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_info = additional_info

    @property
    def altitude(self):
        """Gets the altitude of this Faidarev1LocationDTO.  # noqa: E501


        :return: The altitude of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this Faidarev1LocationDTO.


        :param altitude: The altitude of this Faidarev1LocationDTO.  # noqa: E501
        :type: float
        """

        self._altitude = altitude

    @property
    def country_code(self):
        """Gets the country_code of this Faidarev1LocationDTO.  # noqa: E501


        :return: The country_code of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Faidarev1LocationDTO.


        :param country_code: The country_code of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this Faidarev1LocationDTO.  # noqa: E501


        :return: The country_name of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this Faidarev1LocationDTO.


        :param country_name: The country_name of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def documentation_url(self):
        """Gets the documentation_url of this Faidarev1LocationDTO.  # noqa: E501


        :return: The documentation_url of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this Faidarev1LocationDTO.


        :param documentation_url: The documentation_url of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._documentation_url = documentation_url

    @property
    def institute_address(self):
        """Gets the institute_address of this Faidarev1LocationDTO.  # noqa: E501


        :return: The institute_address of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._institute_address

    @institute_address.setter
    def institute_address(self, institute_address):
        """Sets the institute_address of this Faidarev1LocationDTO.


        :param institute_address: The institute_address of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._institute_address = institute_address

    @property
    def institute_adress(self):
        """Gets the institute_adress of this Faidarev1LocationDTO.  # noqa: E501


        :return: The institute_adress of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._institute_adress

    @institute_adress.setter
    def institute_adress(self, institute_adress):
        """Sets the institute_adress of this Faidarev1LocationDTO.


        :param institute_adress: The institute_adress of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._institute_adress = institute_adress

    @property
    def institute_name(self):
        """Gets the institute_name of this Faidarev1LocationDTO.  # noqa: E501


        :return: The institute_name of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._institute_name

    @institute_name.setter
    def institute_name(self, institute_name):
        """Sets the institute_name of this Faidarev1LocationDTO.


        :param institute_name: The institute_name of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._institute_name = institute_name

    @property
    def latitude(self):
        """Gets the latitude of this Faidarev1LocationDTO.  # noqa: E501


        :return: The latitude of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Faidarev1LocationDTO.


        :param latitude: The latitude of this Faidarev1LocationDTO.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def location_db_id(self):
        """Gets the location_db_id of this Faidarev1LocationDTO.  # noqa: E501


        :return: The location_db_id of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._location_db_id

    @location_db_id.setter
    def location_db_id(self, location_db_id):
        """Sets the location_db_id of this Faidarev1LocationDTO.


        :param location_db_id: The location_db_id of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._location_db_id = location_db_id

    @property
    def location_name(self):
        """Gets the location_name of this Faidarev1LocationDTO.  # noqa: E501


        :return: The location_name of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this Faidarev1LocationDTO.


        :param location_name: The location_name of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def name(self):
        """Gets the name of this Faidarev1LocationDTO.  # noqa: E501


        :return: The name of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Faidarev1LocationDTO.


        :param name: The name of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def location_type(self):
        """Gets the location_type of this Faidarev1LocationDTO.  # noqa: E501


        :return: The location_type of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Faidarev1LocationDTO.


        :param location_type: The location_type of this Faidarev1LocationDTO.  # noqa: E501
        :type: str
        """

        self._location_type = location_type

    @property
    def longitude(self):
        """Gets the longitude of this Faidarev1LocationDTO.  # noqa: E501


        :return: The longitude of this Faidarev1LocationDTO.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Faidarev1LocationDTO.


        :param longitude: The longitude of this Faidarev1LocationDTO.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Faidarev1LocationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(Faidarev1LocationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Faidarev1LocationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
