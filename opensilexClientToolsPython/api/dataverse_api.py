# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from typing import List
from opensilexClientToolsPython.models import *
from datetime import date
import inspect
from opensilexClientToolsPython.api_client import ApiClient


class DataverseApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        
    def available_dataset_languages(
        self,
        **kwargs
    ):  # noqa: E501
        """Get the available dataset languages  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.available_dataset_languages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        


        if kwargs.get('async_req'):
            return self.available_dataset_languages_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.available_dataset_languages_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def available_dataset_languages_with_http_info(self, **kwargs):  # noqa: E501
        """Get the available dataset languages  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.available_dataset_languages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method available_dataset_languages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataverse/datasetLanguages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def available_dataset_metadata_languages(
        self,
        **kwargs
    ):  # noqa: E501
        """Get the available dataset metadata languages  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.available_dataset_metadata_languages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        


        if kwargs.get('async_req'):
            return self.available_dataset_metadata_languages_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.available_dataset_metadata_languages_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def available_dataset_metadata_languages_with_http_info(self, **kwargs):  # noqa: E501
        """Get the available dataset metadata languages  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.available_dataset_metadata_languages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method available_dataset_metadata_languages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataverse/datasetMetadataLanguages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def create_dataset(
        self,
        experiment_uri : 'str',
        dataset_title : 'str',
        dataset_authors : 'List[str]',
        dataset_contacts : 'List[str]',
        dataset_language : 'str',
        dataset_metadata_language : 'str',
        dataset_rdf_type : 'str',
        production_date : 'str' = None,
        dataset_uri : 'str' = None,
        dataset_deprecated : 'bool' = None,
        dataverse_base_path : 'str' = None,
        dataverse_alias : 'str' = None,
        external_api_key : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Create experiment as a Dataset  # noqa: E501

        To consult the document created use the Document API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dataset(experiment_uri, dataset_title, dataset_authors, dataset_contacts, dataset_language, dataset_metadata_language, dataset_rdf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str experiment_uri: Experiment URI (required)
        :param str dataset_title: Dataset Title (required)
        :param list[str] dataset_authors: Dataset Authors (required)
        :param list[str] dataset_contacts: Dataset Contacts (required)
        :param str dataset_language: Dataset Language from list of values : [en, fr] (required)
        :param str dataset_metadata_language: Dataset Metadata Language from list of values : [en, fr] (required)
        :param str dataset_rdf_type: URI of the rdf_type of the dataset (required)
        :param str authorization: Authentication token (required)
        :param str production_date: Dataset Production Date
        :param str dataset_uri: Dataset URI
        :param bool dataset_deprecated: Dataset deprecated
        :param str dataverse_base_path: Dataverse API base path
        :param str dataverse_alias: Parent dataverse alias
        :param str external_api_key: Dataverse API key
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["experiment_uri", "dataset_title", "dataset_authors", "dataset_contacts", "dataset_language", "dataset_metadata_language", "dataset_rdf_type", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(experiment_uri, str) and experiment_uri != None:
            raise ValueError("Invalid value for parameter `experiment_uri`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(dataset_title, str) and dataset_title != None:
            raise ValueError("Invalid value for parameter `dataset_title`. This parameter couldn't be cast to type `str`")
             
        if (not isinstance(dataset_authors, list) or not isinstance(dataset_authors[0], str)) and dataset_authors != None:
            raise ValueError("Invalid value for parameter `dataset_authors`. This parameter couldn't be cast to type `List[str]`")
             
        if (not isinstance(dataset_contacts, list) or not isinstance(dataset_contacts[0], str)) and dataset_contacts != None:
            raise ValueError("Invalid value for parameter `dataset_contacts`. This parameter couldn't be cast to type `List[str]`")
             
        if not isinstance(dataset_language, str) and dataset_language != None:
            raise ValueError("Invalid value for parameter `dataset_language`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(dataset_metadata_language, str) and dataset_metadata_language != None:
            raise ValueError("Invalid value for parameter `dataset_metadata_language`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(dataset_rdf_type, str) and dataset_rdf_type != None:
            raise ValueError("Invalid value for parameter `dataset_rdf_type`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(production_date, str) and production_date != None:
            raise ValueError("Invalid value for parameter `production_date`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(dataset_uri, str) and dataset_uri != None:
            raise ValueError("Invalid value for parameter `dataset_uri`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(dataset_deprecated, bool) and dataset_deprecated != None:
            raise ValueError("Invalid value for parameter `dataset_deprecated`. This parameter couldn't be cast to type `bool`")
                 
        if not isinstance(dataverse_base_path, str) and dataverse_base_path != None:
            raise ValueError("Invalid value for parameter `dataverse_base_path`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(dataverse_alias, str) and dataverse_alias != None:
            raise ValueError("Invalid value for parameter `dataverse_alias`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(external_api_key, str) and external_api_key != None:
            raise ValueError("Invalid value for parameter `external_api_key`. This parameter couldn't be cast to type `str`")
                 


        if kwargs.get('async_req'):
            return self.create_dataset_with_http_info(experiment_uri, dataset_title, dataset_authors, dataset_contacts, dataset_language, dataset_metadata_language, dataset_rdf_type, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dataset_with_http_info(experiment_uri, dataset_title, dataset_authors, dataset_contacts, dataset_language, dataset_metadata_language, dataset_rdf_type, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def create_dataset_with_http_info(self, experiment_uri, dataset_title, dataset_authors, dataset_contacts, dataset_language, dataset_metadata_language, dataset_rdf_type, **kwargs):  # noqa: E501
        """Create experiment as a Dataset  # noqa: E501

        To consult the document created use the Document API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dataset_with_http_info(experiment_uri, dataset_title, dataset_authors, dataset_contacts, dataset_language, dataset_metadata_language, dataset_rdf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str experiment_uri: Experiment URI (required)
        :param str dataset_title: Dataset Title (required)
        :param list[str] dataset_authors: Dataset Authors (required)
        :param list[str] dataset_contacts: Dataset Contacts (required)
        :param str dataset_language: Dataset Language from list of values : [en, fr] (required)
        :param str dataset_metadata_language: Dataset Metadata Language from list of values : [en, fr] (required)
        :param str dataset_rdf_type: URI of the rdf_type of the dataset (required)
        :param str authorization: Authentication token (required)
        :param str production_date: Dataset Production Date
        :param str dataset_uri: Dataset URI
        :param bool dataset_deprecated: Dataset deprecated
        :param str dataverse_base_path: Dataverse API base path
        :param str dataverse_alias: Parent dataverse alias
        :param str external_api_key: Dataverse API key
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_uri', 'dataset_title', 'dataset_authors', 'dataset_contacts', 'dataset_language', 'dataset_metadata_language', 'dataset_rdf_type', 'production_date', 'dataset_uri', 'dataset_deprecated', 'dataverse_base_path', 'dataverse_alias', 'external_api_key', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_uri' is set
        if ('experiment_uri' not in params or
                params['experiment_uri'] is None):
            raise ValueError("Missing the required parameter `experiment_uri` when calling `create_dataset`")  # noqa: E501
        # verify the required parameter 'dataset_title' is set
        if ('dataset_title' not in params or
                params['dataset_title'] is None):
            raise ValueError("Missing the required parameter `dataset_title` when calling `create_dataset`")  # noqa: E501
        # verify the required parameter 'dataset_authors' is set
        if ('dataset_authors' not in params or
                params['dataset_authors'] is None):
            raise ValueError("Missing the required parameter `dataset_authors` when calling `create_dataset`")  # noqa: E501
        # verify the required parameter 'dataset_contacts' is set
        if ('dataset_contacts' not in params or
                params['dataset_contacts'] is None):
            raise ValueError("Missing the required parameter `dataset_contacts` when calling `create_dataset`")  # noqa: E501
        # verify the required parameter 'dataset_language' is set
        if ('dataset_language' not in params or
                params['dataset_language'] is None):
            raise ValueError("Missing the required parameter `dataset_language` when calling `create_dataset`")  # noqa: E501
        # verify the required parameter 'dataset_metadata_language' is set
        if ('dataset_metadata_language' not in params or
                params['dataset_metadata_language'] is None):
            raise ValueError("Missing the required parameter `dataset_metadata_language` when calling `create_dataset`")  # noqa: E501
        # verify the required parameter 'dataset_rdf_type' is set
        if ('dataset_rdf_type' not in params or
                params['dataset_rdf_type'] is None):
            raise ValueError("Missing the required parameter `dataset_rdf_type` when calling `create_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'experiment_uri' in params:
            query_params.append(('experimentUri', params['experiment_uri']))  # noqa: E501
        if 'dataset_title' in params:
            query_params.append(('datasetTitle', params['dataset_title']))  # noqa: E501
        if 'dataset_authors' in params:
            query_params.append(('datasetAuthors', params['dataset_authors']))  # noqa: E501
            collection_formats['datasetAuthors'] = 'multi'  # noqa: E501
        if 'dataset_contacts' in params:
            query_params.append(('datasetContacts', params['dataset_contacts']))  # noqa: E501
            collection_formats['datasetContacts'] = 'multi'  # noqa: E501
        if 'dataset_language' in params:
            query_params.append(('datasetLanguage', params['dataset_language']))  # noqa: E501
        if 'dataset_metadata_language' in params:
            query_params.append(('datasetMetadataLanguage', params['dataset_metadata_language']))  # noqa: E501
        if 'dataset_rdf_type' in params:
            query_params.append(('datasetRDFType', params['dataset_rdf_type']))  # noqa: E501
        if 'production_date' in params:
            query_params.append(('productionDate', params['production_date']))  # noqa: E501
        if 'dataset_uri' in params:
            query_params.append(('datasetUri', params['dataset_uri']))  # noqa: E501
        if 'dataset_deprecated' in params:
            query_params.append(('datasetDeprecated', params['dataset_deprecated']))  # noqa: E501
        if 'dataverse_base_path' in params:
            query_params.append(('dataverseBasePath', params['dataverse_base_path']))  # noqa: E501
        if 'dataverse_alias' in params:
            query_params.append(('dataverseAlias', params['dataverse_alias']))  # noqa: E501
        if 'external_api_key' in params:
            query_params.append(('externalAPIKey', params['external_api_key']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataverse', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def recherche_data_gouv_base_path(
        self,
        **kwargs
    ):  # noqa: E501
        """Get the Recherche Data Gouv url from the instance configuration  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_data_gouv_base_path(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        


        if kwargs.get('async_req'):
            return self.recherche_data_gouv_base_path_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.recherche_data_gouv_base_path_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def recherche_data_gouv_base_path_with_http_info(self, **kwargs):  # noqa: E501
        """Get the Recherche Data Gouv url from the instance configuration  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_data_gouv_base_path_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recherche_data_gouv_base_path" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataverse/RechercheDataGouvBasePath', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
