# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class AnonId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blank_node_id': 'BlankNodeId',
        'label_string': 'str'
    }

    attribute_map = {
        'blank_node_id': 'blankNodeId',
        'label_string': 'labelString'
    }
    def __init__(self,
        blank_node_id : 'BlankNodeId' = None,
        label_string : 'str' = None):  # noqa: E501
        """AnonId - a model defined in Swagger"""  # noqa: E501

        self._blank_node_id = None
        self._label_string = None
        self.discriminator = None

        if blank_node_id is not None:
            self.blank_node_id = blank_node_id
        if label_string is not None:
            self.label_string = label_string

    @property
    def blank_node_id(self):
        """Gets the blank_node_id of this AnonId.  # noqa: E501


        :return: The blank_node_id of this AnonId.  # noqa: E501
        :rtype: BlankNodeId
        """
        return self._blank_node_id

    @blank_node_id.setter
    def blank_node_id(self, blank_node_id):
        """Sets the blank_node_id of this AnonId.


        :param blank_node_id: The blank_node_id of this AnonId.  # noqa: E501
        :type: BlankNodeId
        """

        self._blank_node_id = blank_node_id

    @property
    def label_string(self):
        """Gets the label_string of this AnonId.  # noqa: E501


        :return: The label_string of this AnonId.  # noqa: E501
        :rtype: str
        """
        return self._label_string

    @label_string.setter
    def label_string(self, label_string):
        """Sets the label_string of this AnonId.


        :param label_string: The label_string of this AnonId.  # noqa: E501
        :type: str
        """

        self._label_string = label_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnonId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(AnonId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnonId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
