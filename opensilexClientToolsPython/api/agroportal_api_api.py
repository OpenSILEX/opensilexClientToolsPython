# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from typing import List
from opensilexClientToolsPython.models import *
from datetime import date
import inspect
from opensilexClientToolsPython.api_client import ApiClient


class AgroportalAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        
    def get_agroportal_ontologies(
        self,
        name : 'str' = None,
        ontologies : 'List[str]' = None,
        **kwargs
    ):  # noqa: E501
        """Get ontologies from agroportal  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agroportal_ontologies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str name: Name (regex)
        :param list[str] ontologies: List of ontologies to get (acronyms)
        :param str accept_language: Request accepted language
        :return: list[OntologyAgroportalDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(name, str) and name != None:
            raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str`")
                 
        if (not isinstance(ontologies, list) or not isinstance(ontologies[0], str)) and ontologies != None:
            raise ValueError("Invalid value for parameter `ontologies`. This parameter couldn't be cast to type `List[str]`")
                 


        if kwargs.get('async_req'):
            return self.get_agroportal_ontologies_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_agroportal_ontologies_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_agroportal_ontologies_with_http_info(self, **kwargs):  # noqa: E501
        """Get ontologies from agroportal  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agroportal_ontologies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str name: Name (regex)
        :param list[str] ontologies: List of ontologies to get (acronyms)
        :param str accept_language: Request accepted language
        :return: list[OntologyAgroportalDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'ontologies', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agroportal_ontologies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'ontologies' in params:
            query_params.append(('ontologies', params['ontologies']))  # noqa: E501
            collection_formats['ontologies'] = 'multi'  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/agroportal/ontologies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OntologyAgroportalDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def ping_agroportal(
        self,
        timeout : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Ping agroportal server  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_agroportal(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param int timeout: Timeout
        :param str accept_language: Request accepted language
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(timeout, int) and timeout != None:
            raise ValueError("Invalid value for parameter `timeout`. This parameter couldn't be cast to type `int`")
                 


        if kwargs.get('async_req'):
            return self.ping_agroportal_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.ping_agroportal_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def ping_agroportal_with_http_info(self, **kwargs):  # noqa: E501
        """Ping agroportal server  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_agroportal_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param int timeout: Timeout
        :param str accept_language: Request accepted language
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timeout', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_agroportal" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/agroportal/ping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def search_through_agroportal(
        self,
        name : 'str' = None,
        ontologies : 'List[str]' = None,
        **kwargs
    ):  # noqa: E501
        """Search through agroportal  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_through_agroportal(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str name: Name (regex)
        :param list[str] ontologies: List of ontologies (acronym)
        :param str accept_language: Request accepted language
        :return: list[AgroportalTermDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(name, str) and name != None:
            raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str`")
                 
        if (not isinstance(ontologies, list) or not isinstance(ontologies[0], str)) and ontologies != None:
            raise ValueError("Invalid value for parameter `ontologies`. This parameter couldn't be cast to type `List[str]`")
                 


        if kwargs.get('async_req'):
            return self.search_through_agroportal_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.search_through_agroportal_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def search_through_agroportal_with_http_info(self, **kwargs):  # noqa: E501
        """Search through agroportal  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_through_agroportal_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str name: Name (regex)
        :param list[str] ontologies: List of ontologies (acronym)
        :param str accept_language: Request accepted language
        :return: list[AgroportalTermDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'ontologies', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_through_agroportal" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'ontologies' in params:
            query_params.append(('ontologies', params['ontologies']))  # noqa: E501
            collection_formats['ontologies'] = 'multi'  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/agroportal/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AgroportalTermDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
