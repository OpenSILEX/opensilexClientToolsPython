# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class AgroportalOntologiesConfigDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_ontologies': 'list[str]',
        'trait_ontologies': 'list[str]',
        'method_ontologies': 'list[str]',
        'unit_ontologies': 'list[str]'
    }

    attribute_map = {
        'entity_ontologies': 'entityOntologies',
        'trait_ontologies': 'traitOntologies',
        'method_ontologies': 'methodOntologies',
        'unit_ontologies': 'unitOntologies'
    }
    def __init__(self,
        entity_ontologies : 'List[str]' = None,
        trait_ontologies : 'List[str]' = None,
        method_ontologies : 'List[str]' = None,
        unit_ontologies : 'List[str]' = None):  # noqa: E501
        """AgroportalOntologiesConfigDTO - a model defined in Swagger"""  # noqa: E501

        self._entity_ontologies = None
        self._trait_ontologies = None
        self._method_ontologies = None
        self._unit_ontologies = None
        self.discriminator = None

        if entity_ontologies is not None:
            self.entity_ontologies = entity_ontologies
        if trait_ontologies is not None:
            self.trait_ontologies = trait_ontologies
        if method_ontologies is not None:
            self.method_ontologies = method_ontologies
        if unit_ontologies is not None:
            self.unit_ontologies = unit_ontologies

    @property
    def entity_ontologies(self):
        """Gets the entity_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501


        :return: The entity_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._entity_ontologies

    @entity_ontologies.setter
    def entity_ontologies(self, entity_ontologies):
        """Sets the entity_ontologies of this AgroportalOntologiesConfigDTO.


        :param entity_ontologies: The entity_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501
        :type: list[str]
        """

        self._entity_ontologies = entity_ontologies

    @property
    def trait_ontologies(self):
        """Gets the trait_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501


        :return: The trait_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._trait_ontologies

    @trait_ontologies.setter
    def trait_ontologies(self, trait_ontologies):
        """Sets the trait_ontologies of this AgroportalOntologiesConfigDTO.


        :param trait_ontologies: The trait_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501
        :type: list[str]
        """

        self._trait_ontologies = trait_ontologies

    @property
    def method_ontologies(self):
        """Gets the method_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501


        :return: The method_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._method_ontologies

    @method_ontologies.setter
    def method_ontologies(self, method_ontologies):
        """Sets the method_ontologies of this AgroportalOntologiesConfigDTO.


        :param method_ontologies: The method_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501
        :type: list[str]
        """

        self._method_ontologies = method_ontologies

    @property
    def unit_ontologies(self):
        """Gets the unit_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501


        :return: The unit_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._unit_ontologies

    @unit_ontologies.setter
    def unit_ontologies(self, unit_ontologies):
        """Sets the unit_ontologies of this AgroportalOntologiesConfigDTO.


        :param unit_ontologies: The unit_ontologies of this AgroportalOntologiesConfigDTO.  # noqa: E501
        :type: list[str]
        """

        self._unit_ontologies = unit_ontologies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgroportalOntologiesConfigDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(AgroportalOntologiesConfigDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgroportalOntologiesConfigDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
