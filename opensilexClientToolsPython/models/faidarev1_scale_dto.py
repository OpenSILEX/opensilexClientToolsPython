# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class Faidarev1ScaleDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'decimal_places': 'str',
        'scale_db_id': 'str',
        'name': 'str',
        'valid_values': 'str',
        'xref': 'str'
    }

    attribute_map = {
        'data_type': 'dataType',
        'decimal_places': 'decimalPlaces',
        'scale_db_id': 'scaleDbId',
        'name': 'name',
        'valid_values': 'validValues',
        'xref': 'xref'
    }
    def __init__(self,
        data_type : 'str' = None,
        decimal_places : 'str' = None,
        scale_db_id : 'str' = None,
        name : 'str' = None,
        valid_values : 'str' = None,
        xref : 'str' = None):  # noqa: E501
        """Faidarev1ScaleDTO - a model defined in Swagger"""  # noqa: E501

        self._data_type = None
        self._decimal_places = None
        self._scale_db_id = None
        self._name = None
        self._valid_values = None
        self._xref = None
        self.discriminator = None

        if data_type is not None:
            self.data_type = data_type
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if scale_db_id is not None:
            self.scale_db_id = scale_db_id
        if name is not None:
            self.name = name
        if valid_values is not None:
            self.valid_values = valid_values
        if xref is not None:
            self.xref = xref

    @property
    def data_type(self):
        """Gets the data_type of this Faidarev1ScaleDTO.  # noqa: E501


        :return: The data_type of this Faidarev1ScaleDTO.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Faidarev1ScaleDTO.


        :param data_type: The data_type of this Faidarev1ScaleDTO.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def decimal_places(self):
        """Gets the decimal_places of this Faidarev1ScaleDTO.  # noqa: E501


        :return: The decimal_places of this Faidarev1ScaleDTO.  # noqa: E501
        :rtype: str
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this Faidarev1ScaleDTO.


        :param decimal_places: The decimal_places of this Faidarev1ScaleDTO.  # noqa: E501
        :type: str
        """

        self._decimal_places = decimal_places

    @property
    def scale_db_id(self):
        """Gets the scale_db_id of this Faidarev1ScaleDTO.  # noqa: E501


        :return: The scale_db_id of this Faidarev1ScaleDTO.  # noqa: E501
        :rtype: str
        """
        return self._scale_db_id

    @scale_db_id.setter
    def scale_db_id(self, scale_db_id):
        """Sets the scale_db_id of this Faidarev1ScaleDTO.


        :param scale_db_id: The scale_db_id of this Faidarev1ScaleDTO.  # noqa: E501
        :type: str
        """

        self._scale_db_id = scale_db_id

    @property
    def name(self):
        """Gets the name of this Faidarev1ScaleDTO.  # noqa: E501


        :return: The name of this Faidarev1ScaleDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Faidarev1ScaleDTO.


        :param name: The name of this Faidarev1ScaleDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def valid_values(self):
        """Gets the valid_values of this Faidarev1ScaleDTO.  # noqa: E501


        :return: The valid_values of this Faidarev1ScaleDTO.  # noqa: E501
        :rtype: str
        """
        return self._valid_values

    @valid_values.setter
    def valid_values(self, valid_values):
        """Sets the valid_values of this Faidarev1ScaleDTO.


        :param valid_values: The valid_values of this Faidarev1ScaleDTO.  # noqa: E501
        :type: str
        """

        self._valid_values = valid_values

    @property
    def xref(self):
        """Gets the xref of this Faidarev1ScaleDTO.  # noqa: E501


        :return: The xref of this Faidarev1ScaleDTO.  # noqa: E501
        :rtype: str
        """
        return self._xref

    @xref.setter
    def xref(self, xref):
        """Sets the xref of this Faidarev1ScaleDTO.


        :param xref: The xref of this Faidarev1ScaleDTO.  # noqa: E501
        :type: str
        """

        self._xref = xref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Faidarev1ScaleDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(Faidarev1ScaleDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Faidarev1ScaleDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
