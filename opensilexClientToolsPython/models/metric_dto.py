# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class MetricDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'object_uri': 'str',
        'created_date': 'str',
        'items': 'list[CountListItemDTO]'
    }

    attribute_map = {
        'uri': 'uri',
        'object_uri': 'object_uri',
        'created_date': 'created_date',
        'items': 'items'
    }
    def __init__(self,
        created_date : 'str',
        uri : 'str' = None,
        object_uri : 'str' = None,
        items : 'List[CountListItemDTO]' = None):  # noqa: E501
        """MetricDTO - a model defined in Swagger"""  # noqa: E501

        self._uri = None
        self._object_uri = None
        self._created_date = None
        self._items = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if object_uri is not None:
            self.object_uri = object_uri
        self.created_date = created_date
        if items is not None:
            self.items = items

    @property
    def uri(self):
        """Gets the uri of this MetricDTO.  # noqa: E501


        :return: The uri of this MetricDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this MetricDTO.


        :param uri: The uri of this MetricDTO.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def object_uri(self):
        """Gets the object_uri of this MetricDTO.  # noqa: E501


        :return: The object_uri of this MetricDTO.  # noqa: E501
        :rtype: str
        """
        return self._object_uri

    @object_uri.setter
    def object_uri(self, object_uri):
        """Sets the object_uri of this MetricDTO.


        :param object_uri: The object_uri of this MetricDTO.  # noqa: E501
        :type: str
        """

        self._object_uri = object_uri

    @property
    def created_date(self):
        """Gets the created_date of this MetricDTO.  # noqa: E501

        date or datetime  # noqa: E501

        :return: The created_date of this MetricDTO.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this MetricDTO.

        date or datetime  # noqa: E501

        :param created_date: The created_date of this MetricDTO.  # noqa: E501
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def items(self):
        """Gets the items of this MetricDTO.  # noqa: E501


        :return: The items of this MetricDTO.  # noqa: E501
        :rtype: list[CountListItemDTO]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this MetricDTO.


        :param items: The items of this MetricDTO.  # noqa: E501
        :type: list[CountListItemDTO]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(MetricDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
