# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class AgroportalLinksModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'str',
        'ontology': 'str',
        'children': 'str',
        'parents': 'str',
        'descendants': 'str',
        'ancestors': 'str',
        'instances': 'str',
        'tree': 'str',
        'notes': 'str',
        'ui': 'str'
    }

    attribute_map = {
        '_self': 'self',
        'ontology': 'ontology',
        'children': 'children',
        'parents': 'parents',
        'descendants': 'descendants',
        'ancestors': 'ancestors',
        'instances': 'instances',
        'tree': 'tree',
        'notes': 'notes',
        'ui': 'ui'
    }
    def __init__(self,
        _self : 'str' = None,
        ontology : 'str' = None,
        children : 'str' = None,
        parents : 'str' = None,
        descendants : 'str' = None,
        ancestors : 'str' = None,
        instances : 'str' = None,
        tree : 'str' = None,
        notes : 'str' = None,
        ui : 'str' = None):  # noqa: E501
        """AgroportalLinksModel - a model defined in Swagger"""  # noqa: E501

        self.__self = None
        self._ontology = None
        self._children = None
        self._parents = None
        self._descendants = None
        self._ancestors = None
        self._instances = None
        self._tree = None
        self._notes = None
        self._ui = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if ontology is not None:
            self.ontology = ontology
        if children is not None:
            self.children = children
        if parents is not None:
            self.parents = parents
        if descendants is not None:
            self.descendants = descendants
        if ancestors is not None:
            self.ancestors = ancestors
        if instances is not None:
            self.instances = instances
        if tree is not None:
            self.tree = tree
        if notes is not None:
            self.notes = notes
        if ui is not None:
            self.ui = ui

    @property
    def _self(self):
        """Gets the _self of this AgroportalLinksModel.  # noqa: E501


        :return: The _self of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AgroportalLinksModel.


        :param _self: The _self of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def ontology(self):
        """Gets the ontology of this AgroportalLinksModel.  # noqa: E501


        :return: The ontology of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self._ontology

    @ontology.setter
    def ontology(self, ontology):
        """Sets the ontology of this AgroportalLinksModel.


        :param ontology: The ontology of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self._ontology = ontology

    @property
    def children(self):
        """Gets the children of this AgroportalLinksModel.  # noqa: E501


        :return: The children of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this AgroportalLinksModel.


        :param children: The children of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self._children = children

    @property
    def parents(self):
        """Gets the parents of this AgroportalLinksModel.  # noqa: E501


        :return: The parents of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this AgroportalLinksModel.


        :param parents: The parents of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self._parents = parents

    @property
    def descendants(self):
        """Gets the descendants of this AgroportalLinksModel.  # noqa: E501


        :return: The descendants of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self._descendants

    @descendants.setter
    def descendants(self, descendants):
        """Sets the descendants of this AgroportalLinksModel.


        :param descendants: The descendants of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self._descendants = descendants

    @property
    def ancestors(self):
        """Gets the ancestors of this AgroportalLinksModel.  # noqa: E501


        :return: The ancestors of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """Sets the ancestors of this AgroportalLinksModel.


        :param ancestors: The ancestors of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self._ancestors = ancestors

    @property
    def instances(self):
        """Gets the instances of this AgroportalLinksModel.  # noqa: E501


        :return: The instances of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this AgroportalLinksModel.


        :param instances: The instances of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self._instances = instances

    @property
    def tree(self):
        """Gets the tree of this AgroportalLinksModel.  # noqa: E501


        :return: The tree of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this AgroportalLinksModel.


        :param tree: The tree of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self._tree = tree

    @property
    def notes(self):
        """Gets the notes of this AgroportalLinksModel.  # noqa: E501


        :return: The notes of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AgroportalLinksModel.


        :param notes: The notes of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def ui(self):
        """Gets the ui of this AgroportalLinksModel.  # noqa: E501


        :return: The ui of this AgroportalLinksModel.  # noqa: E501
        :rtype: str
        """
        return self._ui

    @ui.setter
    def ui(self, ui):
        """Sets the ui of this AgroportalLinksModel.


        :param ui: The ui of this AgroportalLinksModel.  # noqa: E501
        :type: str
        """

        self._ui = ui

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgroportalLinksModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(AgroportalLinksModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgroportalLinksModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
