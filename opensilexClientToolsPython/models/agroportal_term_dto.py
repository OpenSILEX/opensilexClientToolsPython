# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class AgroportalTermDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'synonym': 'list[str]',
        'definitions': 'list[str]',
        'ontology_name': 'str',
        'obsolete': 'bool',
        'type': 'str',
        'links': 'AgroportalLinksModel'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'synonym': 'synonym',
        'definitions': 'definitions',
        'ontology_name': 'ontologyName',
        'obsolete': 'obsolete',
        'type': 'type',
        'links': 'links'
    }
    def __init__(self,
        id : 'str',
        ontology_name : 'str',
        name : 'str' = None,
        synonym : 'List[str]' = None,
        definitions : 'List[str]' = None,
        obsolete : 'bool' = None,
        type : 'str' = None,
        links : 'AgroportalLinksModel' = None):  # noqa: E501
        """AgroportalTermDTO - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._synonym = None
        self._definitions = None
        self._ontology_name = None
        self._obsolete = None
        self._type = None
        self._links = None
        self.discriminator = None

        self.id = id
        if name is not None:
            self.name = name
        if synonym is not None:
            self.synonym = synonym
        if definitions is not None:
            self.definitions = definitions
        self.ontology_name = ontology_name
        if obsolete is not None:
            self.obsolete = obsolete
        if type is not None:
            self.type = type
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this AgroportalTermDTO.  # noqa: E501


        :return: The id of this AgroportalTermDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AgroportalTermDTO.


        :param id: The id of this AgroportalTermDTO.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this AgroportalTermDTO.  # noqa: E501


        :return: The name of this AgroportalTermDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AgroportalTermDTO.


        :param name: The name of this AgroportalTermDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def synonym(self):
        """Gets the synonym of this AgroportalTermDTO.  # noqa: E501


        :return: The synonym of this AgroportalTermDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonym

    @synonym.setter
    def synonym(self, synonym):
        """Sets the synonym of this AgroportalTermDTO.


        :param synonym: The synonym of this AgroportalTermDTO.  # noqa: E501
        :type: list[str]
        """

        self._synonym = synonym

    @property
    def definitions(self):
        """Gets the definitions of this AgroportalTermDTO.  # noqa: E501


        :return: The definitions of this AgroportalTermDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """Sets the definitions of this AgroportalTermDTO.


        :param definitions: The definitions of this AgroportalTermDTO.  # noqa: E501
        :type: list[str]
        """

        self._definitions = definitions

    @property
    def ontology_name(self):
        """Gets the ontology_name of this AgroportalTermDTO.  # noqa: E501


        :return: The ontology_name of this AgroportalTermDTO.  # noqa: E501
        :rtype: str
        """
        return self._ontology_name

    @ontology_name.setter
    def ontology_name(self, ontology_name):
        """Sets the ontology_name of this AgroportalTermDTO.


        :param ontology_name: The ontology_name of this AgroportalTermDTO.  # noqa: E501
        :type: str
        """
        if ontology_name is None:
            raise ValueError("Invalid value for `ontology_name`, must not be `None`")  # noqa: E501

        self._ontology_name = ontology_name

    @property
    def obsolete(self):
        """Gets the obsolete of this AgroportalTermDTO.  # noqa: E501


        :return: The obsolete of this AgroportalTermDTO.  # noqa: E501
        :rtype: bool
        """
        return self._obsolete

    @obsolete.setter
    def obsolete(self, obsolete):
        """Sets the obsolete of this AgroportalTermDTO.


        :param obsolete: The obsolete of this AgroportalTermDTO.  # noqa: E501
        :type: bool
        """

        self._obsolete = obsolete

    @property
    def type(self):
        """Gets the type of this AgroportalTermDTO.  # noqa: E501


        :return: The type of this AgroportalTermDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AgroportalTermDTO.


        :param type: The type of this AgroportalTermDTO.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def links(self):
        """Gets the links of this AgroportalTermDTO.  # noqa: E501


        :return: The links of this AgroportalTermDTO.  # noqa: E501
        :rtype: AgroportalLinksModel
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AgroportalTermDTO.


        :param links: The links of this AgroportalTermDTO.  # noqa: E501
        :type: AgroportalLinksModel
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgroportalTermDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(AgroportalTermDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgroportalTermDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
