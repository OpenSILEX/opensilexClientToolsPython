# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class Faidarev1TrialDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'additional_info': 'Faidarev1TrialAdditionalInfoDTO',
        'documentation_url': 'str',
        'end_date': 'str',
        'start_date': 'str',
        'trial_name': 'str',
        'trial_db_id': 'str',
        'trial_type': 'str',
        'dataset_authorship': 'Faidarev1DatasetAuthorshipDTO',
        'studies': 'list[Faidarev1StudySummaryDTO]',
        'contacts': 'list[Faidarev1ContactDTO]',
        'program_db_id': 'str',
        'program_name': 'str'
    }

    attribute_map = {
        'active': 'active',
        'additional_info': 'additionalInfo',
        'documentation_url': 'documentationURL',
        'end_date': 'endDate',
        'start_date': 'startDate',
        'trial_name': 'trialName',
        'trial_db_id': 'trialDbId',
        'trial_type': 'trialType',
        'dataset_authorship': 'datasetAuthorship',
        'studies': 'studies',
        'contacts': 'contacts',
        'program_db_id': 'programDbId',
        'program_name': 'programName'
    }
    def __init__(self,
        active : 'bool' = None,
        additional_info : 'Faidarev1TrialAdditionalInfoDTO' = None,
        documentation_url : 'str' = None,
        end_date : 'str' = None,
        start_date : 'str' = None,
        trial_name : 'str' = None,
        trial_db_id : 'str' = None,
        trial_type : 'str' = None,
        dataset_authorship : 'Faidarev1DatasetAuthorshipDTO' = None,
        studies : 'List[Faidarev1StudySummaryDTO]' = None,
        contacts : 'List[Faidarev1ContactDTO]' = None,
        program_db_id : 'str' = None,
        program_name : 'str' = None):  # noqa: E501
        """Faidarev1TrialDTO - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._additional_info = None
        self._documentation_url = None
        self._end_date = None
        self._start_date = None
        self._trial_name = None
        self._trial_db_id = None
        self._trial_type = None
        self._dataset_authorship = None
        self._studies = None
        self._contacts = None
        self._program_db_id = None
        self._program_name = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if additional_info is not None:
            self.additional_info = additional_info
        if documentation_url is not None:
            self.documentation_url = documentation_url
        if end_date is not None:
            self.end_date = end_date
        if start_date is not None:
            self.start_date = start_date
        if trial_name is not None:
            self.trial_name = trial_name
        if trial_db_id is not None:
            self.trial_db_id = trial_db_id
        if trial_type is not None:
            self.trial_type = trial_type
        if dataset_authorship is not None:
            self.dataset_authorship = dataset_authorship
        if studies is not None:
            self.studies = studies
        if contacts is not None:
            self.contacts = contacts
        if program_db_id is not None:
            self.program_db_id = program_db_id
        if program_name is not None:
            self.program_name = program_name

    @property
    def active(self):
        """Gets the active of this Faidarev1TrialDTO.  # noqa: E501


        :return: The active of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Faidarev1TrialDTO.


        :param active: The active of this Faidarev1TrialDTO.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def additional_info(self):
        """Gets the additional_info of this Faidarev1TrialDTO.  # noqa: E501


        :return: The additional_info of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: Faidarev1TrialAdditionalInfoDTO
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this Faidarev1TrialDTO.


        :param additional_info: The additional_info of this Faidarev1TrialDTO.  # noqa: E501
        :type: Faidarev1TrialAdditionalInfoDTO
        """

        self._additional_info = additional_info

    @property
    def documentation_url(self):
        """Gets the documentation_url of this Faidarev1TrialDTO.  # noqa: E501


        :return: The documentation_url of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this Faidarev1TrialDTO.


        :param documentation_url: The documentation_url of this Faidarev1TrialDTO.  # noqa: E501
        :type: str
        """

        self._documentation_url = documentation_url

    @property
    def end_date(self):
        """Gets the end_date of this Faidarev1TrialDTO.  # noqa: E501


        :return: The end_date of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Faidarev1TrialDTO.


        :param end_date: The end_date of this Faidarev1TrialDTO.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def start_date(self):
        """Gets the start_date of this Faidarev1TrialDTO.  # noqa: E501


        :return: The start_date of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Faidarev1TrialDTO.


        :param start_date: The start_date of this Faidarev1TrialDTO.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def trial_name(self):
        """Gets the trial_name of this Faidarev1TrialDTO.  # noqa: E501


        :return: The trial_name of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: str
        """
        return self._trial_name

    @trial_name.setter
    def trial_name(self, trial_name):
        """Sets the trial_name of this Faidarev1TrialDTO.


        :param trial_name: The trial_name of this Faidarev1TrialDTO.  # noqa: E501
        :type: str
        """

        self._trial_name = trial_name

    @property
    def trial_db_id(self):
        """Gets the trial_db_id of this Faidarev1TrialDTO.  # noqa: E501


        :return: The trial_db_id of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: str
        """
        return self._trial_db_id

    @trial_db_id.setter
    def trial_db_id(self, trial_db_id):
        """Sets the trial_db_id of this Faidarev1TrialDTO.


        :param trial_db_id: The trial_db_id of this Faidarev1TrialDTO.  # noqa: E501
        :type: str
        """

        self._trial_db_id = trial_db_id

    @property
    def trial_type(self):
        """Gets the trial_type of this Faidarev1TrialDTO.  # noqa: E501


        :return: The trial_type of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: str
        """
        return self._trial_type

    @trial_type.setter
    def trial_type(self, trial_type):
        """Sets the trial_type of this Faidarev1TrialDTO.


        :param trial_type: The trial_type of this Faidarev1TrialDTO.  # noqa: E501
        :type: str
        """

        self._trial_type = trial_type

    @property
    def dataset_authorship(self):
        """Gets the dataset_authorship of this Faidarev1TrialDTO.  # noqa: E501


        :return: The dataset_authorship of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: Faidarev1DatasetAuthorshipDTO
        """
        return self._dataset_authorship

    @dataset_authorship.setter
    def dataset_authorship(self, dataset_authorship):
        """Sets the dataset_authorship of this Faidarev1TrialDTO.


        :param dataset_authorship: The dataset_authorship of this Faidarev1TrialDTO.  # noqa: E501
        :type: Faidarev1DatasetAuthorshipDTO
        """

        self._dataset_authorship = dataset_authorship

    @property
    def studies(self):
        """Gets the studies of this Faidarev1TrialDTO.  # noqa: E501


        :return: The studies of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: list[Faidarev1StudySummaryDTO]
        """
        return self._studies

    @studies.setter
    def studies(self, studies):
        """Sets the studies of this Faidarev1TrialDTO.


        :param studies: The studies of this Faidarev1TrialDTO.  # noqa: E501
        :type: list[Faidarev1StudySummaryDTO]
        """

        self._studies = studies

    @property
    def contacts(self):
        """Gets the contacts of this Faidarev1TrialDTO.  # noqa: E501


        :return: The contacts of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: list[Faidarev1ContactDTO]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Faidarev1TrialDTO.


        :param contacts: The contacts of this Faidarev1TrialDTO.  # noqa: E501
        :type: list[Faidarev1ContactDTO]
        """

        self._contacts = contacts

    @property
    def program_db_id(self):
        """Gets the program_db_id of this Faidarev1TrialDTO.  # noqa: E501


        :return: The program_db_id of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: str
        """
        return self._program_db_id

    @program_db_id.setter
    def program_db_id(self, program_db_id):
        """Sets the program_db_id of this Faidarev1TrialDTO.


        :param program_db_id: The program_db_id of this Faidarev1TrialDTO.  # noqa: E501
        :type: str
        """

        self._program_db_id = program_db_id

    @property
    def program_name(self):
        """Gets the program_name of this Faidarev1TrialDTO.  # noqa: E501


        :return: The program_name of this Faidarev1TrialDTO.  # noqa: E501
        :rtype: str
        """
        return self._program_name

    @program_name.setter
    def program_name(self, program_name):
        """Sets the program_name of this Faidarev1TrialDTO.


        :param program_name: The program_name of this Faidarev1TrialDTO.  # noqa: E501
        :type: str
        """

        self._program_name = program_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Faidarev1TrialDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(Faidarev1TrialDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Faidarev1TrialDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
