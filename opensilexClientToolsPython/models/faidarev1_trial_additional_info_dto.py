# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class Faidarev1TrialAdditionalInfoDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_name': 'str',
        'description': 'str',
        'financial_funding': 'str',
        'related_projects': 'list[str]',
        'coordinators': 'list[Faidarev1ContactDTO]'
    }

    attribute_map = {
        'short_name': 'shortName',
        'description': 'description',
        'financial_funding': 'financialFunding',
        'related_projects': 'relatedProjects',
        'coordinators': 'coordinators'
    }
    def __init__(self,
        short_name : 'str' = None,
        description : 'str' = None,
        financial_funding : 'str' = None,
        related_projects : 'List[str]' = None,
        coordinators : 'List[Faidarev1ContactDTO]' = None):  # noqa: E501
        """Faidarev1TrialAdditionalInfoDTO - a model defined in Swagger"""  # noqa: E501

        self._short_name = None
        self._description = None
        self._financial_funding = None
        self._related_projects = None
        self._coordinators = None
        self.discriminator = None

        if short_name is not None:
            self.short_name = short_name
        if description is not None:
            self.description = description
        if financial_funding is not None:
            self.financial_funding = financial_funding
        if related_projects is not None:
            self.related_projects = related_projects
        if coordinators is not None:
            self.coordinators = coordinators

    @property
    def short_name(self):
        """Gets the short_name of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501


        :return: The short_name of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Faidarev1TrialAdditionalInfoDTO.


        :param short_name: The short_name of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def description(self):
        """Gets the description of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501


        :return: The description of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Faidarev1TrialAdditionalInfoDTO.


        :param description: The description of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def financial_funding(self):
        """Gets the financial_funding of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501


        :return: The financial_funding of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._financial_funding

    @financial_funding.setter
    def financial_funding(self, financial_funding):
        """Sets the financial_funding of this Faidarev1TrialAdditionalInfoDTO.


        :param financial_funding: The financial_funding of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :type: str
        """

        self._financial_funding = financial_funding

    @property
    def related_projects(self):
        """Gets the related_projects of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501


        :return: The related_projects of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._related_projects

    @related_projects.setter
    def related_projects(self, related_projects):
        """Sets the related_projects of this Faidarev1TrialAdditionalInfoDTO.


        :param related_projects: The related_projects of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :type: list[str]
        """

        self._related_projects = related_projects

    @property
    def coordinators(self):
        """Gets the coordinators of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501


        :return: The coordinators of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :rtype: list[Faidarev1ContactDTO]
        """
        return self._coordinators

    @coordinators.setter
    def coordinators(self, coordinators):
        """Sets the coordinators of this Faidarev1TrialAdditionalInfoDTO.


        :param coordinators: The coordinators of this Faidarev1TrialAdditionalInfoDTO.  # noqa: E501
        :type: list[Faidarev1ContactDTO]
        """

        self._coordinators = coordinators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Faidarev1TrialAdditionalInfoDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(Faidarev1TrialAdditionalInfoDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Faidarev1TrialAdditionalInfoDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
