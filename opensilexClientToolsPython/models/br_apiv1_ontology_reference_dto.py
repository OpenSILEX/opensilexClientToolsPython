# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class BrAPIv1OntologyReferenceDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'documentation_links': 'list[BrAPIv1DocumentationLinkDTO]',
        'ontology_db_id': 'str',
        'ontology_name': 'str',
        'version': 'str'
    }

    attribute_map = {
        'documentation_links': 'documentationLinks',
        'ontology_db_id': 'ontologyDbId',
        'ontology_name': 'ontologyName',
        'version': 'version'
    }
    def __init__(self,
        documentation_links : 'List[BrAPIv1DocumentationLinkDTO]' = None,
        ontology_db_id : 'str' = None,
        ontology_name : 'str' = None,
        version : 'str' = None):  # noqa: E501
        """BrAPIv1OntologyReferenceDTO - a model defined in Swagger"""  # noqa: E501

        self._documentation_links = None
        self._ontology_db_id = None
        self._ontology_name = None
        self._version = None
        self.discriminator = None

        if documentation_links is not None:
            self.documentation_links = documentation_links
        if ontology_db_id is not None:
            self.ontology_db_id = ontology_db_id
        if ontology_name is not None:
            self.ontology_name = ontology_name
        if version is not None:
            self.version = version

    @property
    def documentation_links(self):
        """Gets the documentation_links of this BrAPIv1OntologyReferenceDTO.  # noqa: E501


        :return: The documentation_links of this BrAPIv1OntologyReferenceDTO.  # noqa: E501
        :rtype: list[BrAPIv1DocumentationLinkDTO]
        """
        return self._documentation_links

    @documentation_links.setter
    def documentation_links(self, documentation_links):
        """Sets the documentation_links of this BrAPIv1OntologyReferenceDTO.


        :param documentation_links: The documentation_links of this BrAPIv1OntologyReferenceDTO.  # noqa: E501
        :type: list[BrAPIv1DocumentationLinkDTO]
        """

        self._documentation_links = documentation_links

    @property
    def ontology_db_id(self):
        """Gets the ontology_db_id of this BrAPIv1OntologyReferenceDTO.  # noqa: E501


        :return: The ontology_db_id of this BrAPIv1OntologyReferenceDTO.  # noqa: E501
        :rtype: str
        """
        return self._ontology_db_id

    @ontology_db_id.setter
    def ontology_db_id(self, ontology_db_id):
        """Sets the ontology_db_id of this BrAPIv1OntologyReferenceDTO.


        :param ontology_db_id: The ontology_db_id of this BrAPIv1OntologyReferenceDTO.  # noqa: E501
        :type: str
        """

        self._ontology_db_id = ontology_db_id

    @property
    def ontology_name(self):
        """Gets the ontology_name of this BrAPIv1OntologyReferenceDTO.  # noqa: E501


        :return: The ontology_name of this BrAPIv1OntologyReferenceDTO.  # noqa: E501
        :rtype: str
        """
        return self._ontology_name

    @ontology_name.setter
    def ontology_name(self, ontology_name):
        """Sets the ontology_name of this BrAPIv1OntologyReferenceDTO.


        :param ontology_name: The ontology_name of this BrAPIv1OntologyReferenceDTO.  # noqa: E501
        :type: str
        """

        self._ontology_name = ontology_name

    @property
    def version(self):
        """Gets the version of this BrAPIv1OntologyReferenceDTO.  # noqa: E501


        :return: The version of this BrAPIv1OntologyReferenceDTO.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BrAPIv1OntologyReferenceDTO.


        :param version: The version of this BrAPIv1OntologyReferenceDTO.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrAPIv1OntologyReferenceDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(BrAPIv1OntologyReferenceDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrAPIv1OntologyReferenceDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
