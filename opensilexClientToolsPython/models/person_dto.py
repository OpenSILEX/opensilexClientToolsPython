# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class PersonDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'affiliation': 'str',
        'phone_number': 'str',
        'orcid': 'str',
        'account': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'affiliation': 'affiliation',
        'phone_number': 'phone_number',
        'orcid': 'orcid',
        'account': 'account'
    }
    def __init__(self,
        uri : 'str' = None,
        first_name : 'str' = None,
        last_name : 'str' = None,
        email : 'str' = None,
        affiliation : 'str' = None,
        phone_number : 'str' = None,
        orcid : 'str' = None,
        account : 'str' = None):  # noqa: E501
        """PersonDTO - a model defined in Swagger"""  # noqa: E501

        self._uri = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._affiliation = None
        self._phone_number = None
        self._orcid = None
        self._account = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if affiliation is not None:
            self.affiliation = affiliation
        if phone_number is not None:
            self.phone_number = phone_number
        if orcid is not None:
            self.orcid = orcid
        if account is not None:
            self.account = account

    @property
    def uri(self):
        """Gets the uri of this PersonDTO.  # noqa: E501

        Person URI  # noqa: E501

        :return: The uri of this PersonDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PersonDTO.

        Person URI  # noqa: E501

        :param uri: The uri of this PersonDTO.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def first_name(self):
        """Gets the first_name of this PersonDTO.  # noqa: E501

        Person first name  # noqa: E501

        :return: The first_name of this PersonDTO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PersonDTO.

        Person first name  # noqa: E501

        :param first_name: The first_name of this PersonDTO.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PersonDTO.  # noqa: E501

        Person last name  # noqa: E501

        :return: The last_name of this PersonDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PersonDTO.

        Person last name  # noqa: E501

        :param last_name: The last_name of this PersonDTO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this PersonDTO.  # noqa: E501

        email  # noqa: E501

        :return: The email of this PersonDTO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PersonDTO.

        email  # noqa: E501

        :param email: The email of this PersonDTO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def affiliation(self):
        """Gets the affiliation of this PersonDTO.  # noqa: E501

        affiliation  # noqa: E501

        :return: The affiliation of this PersonDTO.  # noqa: E501
        :rtype: str
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this PersonDTO.

        affiliation  # noqa: E501

        :param affiliation: The affiliation of this PersonDTO.  # noqa: E501
        :type: str
        """

        self._affiliation = affiliation

    @property
    def phone_number(self):
        """Gets the phone_number of this PersonDTO.  # noqa: E501

        phone number  # noqa: E501

        :return: The phone_number of this PersonDTO.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PersonDTO.

        phone number  # noqa: E501

        :param phone_number: The phone_number of this PersonDTO.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def orcid(self):
        """Gets the orcid of this PersonDTO.  # noqa: E501

        orcid  # noqa: E501

        :return: The orcid of this PersonDTO.  # noqa: E501
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """Sets the orcid of this PersonDTO.

        orcid  # noqa: E501

        :param orcid: The orcid of this PersonDTO.  # noqa: E501
        :type: str
        """

        self._orcid = orcid

    @property
    def account(self):
        """Gets the account of this PersonDTO.  # noqa: E501

        Uri of the account if this person has one  # noqa: E501

        :return: The account of this PersonDTO.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this PersonDTO.

        Uri of the account if this person has one  # noqa: E501

        :param account: The account of this PersonDTO.  # noqa: E501
        :type: str
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(PersonDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
