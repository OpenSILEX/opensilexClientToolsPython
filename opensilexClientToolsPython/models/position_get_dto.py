# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class PositionGetDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event': 'str',
        'move_time': 'str',
        '_from': 'FacilityNamedDTO',
        'to': 'FacilityNamedDTO',
        'position': 'PositionGetDetailDTO'
    }

    attribute_map = {
        'event': 'event',
        'move_time': 'move_time',
        '_from': 'from',
        'to': 'to',
        'position': 'position'
    }
    def __init__(self,
        event : 'str' = None,
        move_time : 'str' = None,
        _from : 'FacilityNamedDTO' = None,
        to : 'FacilityNamedDTO' = None,
        position : 'PositionGetDetailDTO' = None):  # noqa: E501
        """PositionGetDTO - a model defined in Swagger"""  # noqa: E501

        self._event = None
        self._move_time = None
        self.__from = None
        self._to = None
        self._position = None
        self.discriminator = None

        if event is not None:
            self.event = event
        if move_time is not None:
            self.move_time = move_time
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if position is not None:
            self.position = position

    @property
    def event(self):
        """Gets the event of this PositionGetDTO.  # noqa: E501

        Move event which update the position  # noqa: E501

        :return: The event of this PositionGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this PositionGetDTO.

        Move event which update the position  # noqa: E501

        :param event: The event of this PositionGetDTO.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def move_time(self):
        """Gets the move_time of this PositionGetDTO.  # noqa: E501

        Move time  # noqa: E501

        :return: The move_time of this PositionGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._move_time

    @move_time.setter
    def move_time(self, move_time):
        """Sets the move_time of this PositionGetDTO.

        Move time  # noqa: E501

        :param move_time: The move_time of this PositionGetDTO.  # noqa: E501
        :type: str
        """

        self._move_time = move_time

    @property
    def _from(self):
        """Gets the _from of this PositionGetDTO.  # noqa: E501


        :return: The _from of this PositionGetDTO.  # noqa: E501
        :rtype: FacilityNamedDTO
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this PositionGetDTO.


        :param _from: The _from of this PositionGetDTO.  # noqa: E501
        :type: FacilityNamedDTO
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this PositionGetDTO.  # noqa: E501


        :return: The to of this PositionGetDTO.  # noqa: E501
        :rtype: FacilityNamedDTO
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PositionGetDTO.


        :param to: The to of this PositionGetDTO.  # noqa: E501
        :type: FacilityNamedDTO
        """

        self._to = to

    @property
    def position(self):
        """Gets the position of this PositionGetDTO.  # noqa: E501


        :return: The position of this PositionGetDTO.  # noqa: E501
        :rtype: PositionGetDetailDTO
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PositionGetDTO.


        :param position: The position of this PositionGetDTO.  # noqa: E501
        :type: PositionGetDetailDTO
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PositionGetDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(PositionGetDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionGetDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
