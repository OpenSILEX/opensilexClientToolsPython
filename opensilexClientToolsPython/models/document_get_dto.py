# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class DocumentGetDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'publisher': 'UserGetDTO',
        'publication_date': 'datetime',
        'last_updated_date': 'datetime',
        'identifier': 'str',
        'rdf_type': 'str',
        'rdf_type_name': 'str',
        'title': 'str',
        '_date': 'str',
        'description': 'str',
        'targets': 'list[str]',
        'authors': 'list[str]',
        'language': 'str',
        'format': 'str',
        'keywords': 'list[str]',
        'deprecated': 'bool',
        'source': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'publisher': 'publisher',
        'publication_date': 'publication_date',
        'last_updated_date': 'last_updated_date',
        'identifier': 'identifier',
        'rdf_type': 'rdf_type',
        'rdf_type_name': 'rdf_type_name',
        'title': 'title',
        '_date': 'date',
        'description': 'description',
        'targets': 'targets',
        'authors': 'authors',
        'language': 'language',
        'format': 'format',
        'keywords': 'keywords',
        'deprecated': 'deprecated',
        'source': 'source'
    }
    def __init__(self,
        uri : 'str' = None,
        publisher : 'UserGetDTO' = None,
        publication_date : 'datetime' = None,
        last_updated_date : 'datetime' = None,
        identifier : 'str' = None,
        rdf_type : 'str' = None,
        rdf_type_name : 'str' = None,
        title : 'str' = None,
        _date : 'str' = None,
        description : 'str' = None,
        targets : 'List[str]' = None,
        authors : 'List[str]' = None,
        language : 'str' = None,
        format : 'str' = None,
        keywords : 'List[str]' = None,
        deprecated : 'bool' = None,
        source : 'str' = None):  # noqa: E501
        """DocumentGetDTO - a model defined in Swagger"""  # noqa: E501

        self._uri = None
        self._publisher = None
        self._publication_date = None
        self._last_updated_date = None
        self._identifier = None
        self._rdf_type = None
        self._rdf_type_name = None
        self._title = None
        self.__date = None
        self._description = None
        self._targets = None
        self._authors = None
        self._language = None
        self._format = None
        self._keywords = None
        self._deprecated = None
        self._source = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if publisher is not None:
            self.publisher = publisher
        if publication_date is not None:
            self.publication_date = publication_date
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        if identifier is not None:
            self.identifier = identifier
        if rdf_type is not None:
            self.rdf_type = rdf_type
        if rdf_type_name is not None:
            self.rdf_type_name = rdf_type_name
        if title is not None:
            self.title = title
        if _date is not None:
            self._date = _date
        if description is not None:
            self.description = description
        if targets is not None:
            self.targets = targets
        if authors is not None:
            self.authors = authors
        if language is not None:
            self.language = language
        if format is not None:
            self.format = format
        if keywords is not None:
            self.keywords = keywords
        if deprecated is not None:
            self.deprecated = deprecated
        if source is not None:
            self.source = source

    @property
    def uri(self):
        """Gets the uri of this DocumentGetDTO.  # noqa: E501


        :return: The uri of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DocumentGetDTO.


        :param uri: The uri of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def publisher(self):
        """Gets the publisher of this DocumentGetDTO.  # noqa: E501


        :return: The publisher of this DocumentGetDTO.  # noqa: E501
        :rtype: UserGetDTO
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this DocumentGetDTO.


        :param publisher: The publisher of this DocumentGetDTO.  # noqa: E501
        :type: UserGetDTO
        """

        self._publisher = publisher

    @property
    def publication_date(self):
        """Gets the publication_date of this DocumentGetDTO.  # noqa: E501


        :return: The publication_date of this DocumentGetDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this DocumentGetDTO.


        :param publication_date: The publication_date of this DocumentGetDTO.  # noqa: E501
        :type: datetime
        """

        self._publication_date = publication_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this DocumentGetDTO.  # noqa: E501


        :return: The last_updated_date of this DocumentGetDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this DocumentGetDTO.


        :param last_updated_date: The last_updated_date of this DocumentGetDTO.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date = last_updated_date

    @property
    def identifier(self):
        """Gets the identifier of this DocumentGetDTO.  # noqa: E501


        :return: The identifier of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this DocumentGetDTO.


        :param identifier: The identifier of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def rdf_type(self):
        """Gets the rdf_type of this DocumentGetDTO.  # noqa: E501


        :return: The rdf_type of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._rdf_type

    @rdf_type.setter
    def rdf_type(self, rdf_type):
        """Sets the rdf_type of this DocumentGetDTO.


        :param rdf_type: The rdf_type of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self._rdf_type = rdf_type

    @property
    def rdf_type_name(self):
        """Gets the rdf_type_name of this DocumentGetDTO.  # noqa: E501


        :return: The rdf_type_name of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._rdf_type_name

    @rdf_type_name.setter
    def rdf_type_name(self, rdf_type_name):
        """Sets the rdf_type_name of this DocumentGetDTO.


        :param rdf_type_name: The rdf_type_name of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self._rdf_type_name = rdf_type_name

    @property
    def title(self):
        """Gets the title of this DocumentGetDTO.  # noqa: E501


        :return: The title of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentGetDTO.


        :param title: The title of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def _date(self):
        """Gets the _date of this DocumentGetDTO.  # noqa: E501


        :return: The _date of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DocumentGetDTO.


        :param _date: The _date of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this DocumentGetDTO.  # noqa: E501


        :return: The description of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentGetDTO.


        :param description: The description of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def targets(self):
        """Gets the targets of this DocumentGetDTO.  # noqa: E501


        :return: The targets of this DocumentGetDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this DocumentGetDTO.


        :param targets: The targets of this DocumentGetDTO.  # noqa: E501
        :type: list[str]
        """

        self._targets = targets

    @property
    def authors(self):
        """Gets the authors of this DocumentGetDTO.  # noqa: E501


        :return: The authors of this DocumentGetDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this DocumentGetDTO.


        :param authors: The authors of this DocumentGetDTO.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def language(self):
        """Gets the language of this DocumentGetDTO.  # noqa: E501


        :return: The language of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DocumentGetDTO.


        :param language: The language of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def format(self):
        """Gets the format of this DocumentGetDTO.  # noqa: E501


        :return: The format of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this DocumentGetDTO.


        :param format: The format of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def keywords(self):
        """Gets the keywords of this DocumentGetDTO.  # noqa: E501


        :return: The keywords of this DocumentGetDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this DocumentGetDTO.


        :param keywords: The keywords of this DocumentGetDTO.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def deprecated(self):
        """Gets the deprecated of this DocumentGetDTO.  # noqa: E501


        :return: The deprecated of this DocumentGetDTO.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this DocumentGetDTO.


        :param deprecated: The deprecated of this DocumentGetDTO.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def source(self):
        """Gets the source of this DocumentGetDTO.  # noqa: E501


        :return: The source of this DocumentGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DocumentGetDTO.


        :param source: The source of this DocumentGetDTO.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentGetDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(DocumentGetDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentGetDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
