# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class BrAPIv1GermplasmDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accession_number': 'str',
        'acquisition_date': 'str',
        'biological_status_of_accession_code': 'int',
        'breeding_method_db_id': 'str',
        'common_crop_name': 'str',
        'country_of_origin_code': 'str',
        'default_display_name': 'str',
        'documentation_url': 'str',
        'donors': 'list[object]',
        'germplasm_db_id': 'str',
        'germplasm_genus': 'str',
        'germplasm_name': 'str',
        'germplasm_pui': 'str',
        'germplasm_species': 'str',
        'institute_code': 'str',
        'institute_name': 'str',
        'pedigree': 'str',
        'seed_source': 'str',
        'species_authority': 'str',
        'subtaxa': 'str',
        'subtaxa_authority': 'str',
        'synonyms': 'list[str]',
        'taxon_ids': 'list[object]',
        'source_name': 'str',
        'taxon_id': 'str',
        'type_of_germplasm_storage_code': 'list[str]'
    }

    attribute_map = {
        'accession_number': 'accessionNumber',
        'acquisition_date': 'acquisitionDate',
        'biological_status_of_accession_code': 'biologicalStatusOfAccessionCode',
        'breeding_method_db_id': 'breedingMethodDbId',
        'common_crop_name': 'commonCropName',
        'country_of_origin_code': 'countryOfOriginCode',
        'default_display_name': 'defaultDisplayName',
        'documentation_url': 'documentationURL',
        'donors': 'donors',
        'germplasm_db_id': 'germplasmDbId',
        'germplasm_genus': 'germplasmGenus',
        'germplasm_name': 'germplasmName',
        'germplasm_pui': 'germplasmPUI',
        'germplasm_species': 'germplasmSpecies',
        'institute_code': 'instituteCode',
        'institute_name': 'instituteName',
        'pedigree': 'pedigree',
        'seed_source': 'seedSource',
        'species_authority': 'speciesAuthority',
        'subtaxa': 'subtaxa',
        'subtaxa_authority': 'subtaxaAuthority',
        'synonyms': 'synonyms',
        'taxon_ids': 'taxonIds',
        'source_name': 'sourceName',
        'taxon_id': 'taxonId',
        'type_of_germplasm_storage_code': 'typeOfGermplasmStorageCode'
    }
    def __init__(self,
        accession_number : 'str' = None,
        acquisition_date : 'str' = None,
        biological_status_of_accession_code : 'int' = None,
        breeding_method_db_id : 'str' = None,
        common_crop_name : 'str' = None,
        country_of_origin_code : 'str' = None,
        default_display_name : 'str' = None,
        documentation_url : 'str' = None,
        donors : 'List[object]' = None,
        germplasm_db_id : 'str' = None,
        germplasm_genus : 'str' = None,
        germplasm_name : 'str' = None,
        germplasm_pui : 'str' = None,
        germplasm_species : 'str' = None,
        institute_code : 'str' = None,
        institute_name : 'str' = None,
        pedigree : 'str' = None,
        seed_source : 'str' = None,
        species_authority : 'str' = None,
        subtaxa : 'str' = None,
        subtaxa_authority : 'str' = None,
        synonyms : 'List[str]' = None,
        taxon_ids : 'List[object]' = None,
        source_name : 'str' = None,
        taxon_id : 'str' = None,
        type_of_germplasm_storage_code : 'List[str]' = None):  # noqa: E501
        """BrAPIv1GermplasmDTO - a model defined in Swagger"""  # noqa: E501

        self._accession_number = None
        self._acquisition_date = None
        self._biological_status_of_accession_code = None
        self._breeding_method_db_id = None
        self._common_crop_name = None
        self._country_of_origin_code = None
        self._default_display_name = None
        self._documentation_url = None
        self._donors = None
        self._germplasm_db_id = None
        self._germplasm_genus = None
        self._germplasm_name = None
        self._germplasm_pui = None
        self._germplasm_species = None
        self._institute_code = None
        self._institute_name = None
        self._pedigree = None
        self._seed_source = None
        self._species_authority = None
        self._subtaxa = None
        self._subtaxa_authority = None
        self._synonyms = None
        self._taxon_ids = None
        self._source_name = None
        self._taxon_id = None
        self._type_of_germplasm_storage_code = None
        self.discriminator = None

        if accession_number is not None:
            self.accession_number = accession_number
        if acquisition_date is not None:
            self.acquisition_date = acquisition_date
        if biological_status_of_accession_code is not None:
            self.biological_status_of_accession_code = biological_status_of_accession_code
        if breeding_method_db_id is not None:
            self.breeding_method_db_id = breeding_method_db_id
        if common_crop_name is not None:
            self.common_crop_name = common_crop_name
        if country_of_origin_code is not None:
            self.country_of_origin_code = country_of_origin_code
        if default_display_name is not None:
            self.default_display_name = default_display_name
        if documentation_url is not None:
            self.documentation_url = documentation_url
        if donors is not None:
            self.donors = donors
        if germplasm_db_id is not None:
            self.germplasm_db_id = germplasm_db_id
        if germplasm_genus is not None:
            self.germplasm_genus = germplasm_genus
        if germplasm_name is not None:
            self.germplasm_name = germplasm_name
        if germplasm_pui is not None:
            self.germplasm_pui = germplasm_pui
        if germplasm_species is not None:
            self.germplasm_species = germplasm_species
        if institute_code is not None:
            self.institute_code = institute_code
        if institute_name is not None:
            self.institute_name = institute_name
        if pedigree is not None:
            self.pedigree = pedigree
        if seed_source is not None:
            self.seed_source = seed_source
        if species_authority is not None:
            self.species_authority = species_authority
        if subtaxa is not None:
            self.subtaxa = subtaxa
        if subtaxa_authority is not None:
            self.subtaxa_authority = subtaxa_authority
        if synonyms is not None:
            self.synonyms = synonyms
        if taxon_ids is not None:
            self.taxon_ids = taxon_ids
        if source_name is not None:
            self.source_name = source_name
        if taxon_id is not None:
            self.taxon_id = taxon_id
        if type_of_germplasm_storage_code is not None:
            self.type_of_germplasm_storage_code = type_of_germplasm_storage_code

    @property
    def accession_number(self):
        """Gets the accession_number of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The accession_number of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._accession_number

    @accession_number.setter
    def accession_number(self, accession_number):
        """Sets the accession_number of this BrAPIv1GermplasmDTO.


        :param accession_number: The accession_number of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._accession_number = accession_number

    @property
    def acquisition_date(self):
        """Gets the acquisition_date of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The acquisition_date of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._acquisition_date

    @acquisition_date.setter
    def acquisition_date(self, acquisition_date):
        """Sets the acquisition_date of this BrAPIv1GermplasmDTO.


        :param acquisition_date: The acquisition_date of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._acquisition_date = acquisition_date

    @property
    def biological_status_of_accession_code(self):
        """Gets the biological_status_of_accession_code of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The biological_status_of_accession_code of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: int
        """
        return self._biological_status_of_accession_code

    @biological_status_of_accession_code.setter
    def biological_status_of_accession_code(self, biological_status_of_accession_code):
        """Sets the biological_status_of_accession_code of this BrAPIv1GermplasmDTO.


        :param biological_status_of_accession_code: The biological_status_of_accession_code of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: int
        """

        self._biological_status_of_accession_code = biological_status_of_accession_code

    @property
    def breeding_method_db_id(self):
        """Gets the breeding_method_db_id of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The breeding_method_db_id of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._breeding_method_db_id

    @breeding_method_db_id.setter
    def breeding_method_db_id(self, breeding_method_db_id):
        """Sets the breeding_method_db_id of this BrAPIv1GermplasmDTO.


        :param breeding_method_db_id: The breeding_method_db_id of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._breeding_method_db_id = breeding_method_db_id

    @property
    def common_crop_name(self):
        """Gets the common_crop_name of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The common_crop_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._common_crop_name

    @common_crop_name.setter
    def common_crop_name(self, common_crop_name):
        """Sets the common_crop_name of this BrAPIv1GermplasmDTO.


        :param common_crop_name: The common_crop_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._common_crop_name = common_crop_name

    @property
    def country_of_origin_code(self):
        """Gets the country_of_origin_code of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The country_of_origin_code of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin_code

    @country_of_origin_code.setter
    def country_of_origin_code(self, country_of_origin_code):
        """Sets the country_of_origin_code of this BrAPIv1GermplasmDTO.


        :param country_of_origin_code: The country_of_origin_code of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._country_of_origin_code = country_of_origin_code

    @property
    def default_display_name(self):
        """Gets the default_display_name of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The default_display_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._default_display_name

    @default_display_name.setter
    def default_display_name(self, default_display_name):
        """Sets the default_display_name of this BrAPIv1GermplasmDTO.


        :param default_display_name: The default_display_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._default_display_name = default_display_name

    @property
    def documentation_url(self):
        """Gets the documentation_url of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The documentation_url of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this BrAPIv1GermplasmDTO.


        :param documentation_url: The documentation_url of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._documentation_url = documentation_url

    @property
    def donors(self):
        """Gets the donors of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The donors of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: list[object]
        """
        return self._donors

    @donors.setter
    def donors(self, donors):
        """Sets the donors of this BrAPIv1GermplasmDTO.


        :param donors: The donors of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: list[object]
        """

        self._donors = donors

    @property
    def germplasm_db_id(self):
        """Gets the germplasm_db_id of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The germplasm_db_id of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._germplasm_db_id

    @germplasm_db_id.setter
    def germplasm_db_id(self, germplasm_db_id):
        """Sets the germplasm_db_id of this BrAPIv1GermplasmDTO.


        :param germplasm_db_id: The germplasm_db_id of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._germplasm_db_id = germplasm_db_id

    @property
    def germplasm_genus(self):
        """Gets the germplasm_genus of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The germplasm_genus of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._germplasm_genus

    @germplasm_genus.setter
    def germplasm_genus(self, germplasm_genus):
        """Sets the germplasm_genus of this BrAPIv1GermplasmDTO.


        :param germplasm_genus: The germplasm_genus of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._germplasm_genus = germplasm_genus

    @property
    def germplasm_name(self):
        """Gets the germplasm_name of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The germplasm_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._germplasm_name

    @germplasm_name.setter
    def germplasm_name(self, germplasm_name):
        """Sets the germplasm_name of this BrAPIv1GermplasmDTO.


        :param germplasm_name: The germplasm_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._germplasm_name = germplasm_name

    @property
    def germplasm_pui(self):
        """Gets the germplasm_pui of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The germplasm_pui of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._germplasm_pui

    @germplasm_pui.setter
    def germplasm_pui(self, germplasm_pui):
        """Sets the germplasm_pui of this BrAPIv1GermplasmDTO.


        :param germplasm_pui: The germplasm_pui of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._germplasm_pui = germplasm_pui

    @property
    def germplasm_species(self):
        """Gets the germplasm_species of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The germplasm_species of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._germplasm_species

    @germplasm_species.setter
    def germplasm_species(self, germplasm_species):
        """Sets the germplasm_species of this BrAPIv1GermplasmDTO.


        :param germplasm_species: The germplasm_species of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._germplasm_species = germplasm_species

    @property
    def institute_code(self):
        """Gets the institute_code of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The institute_code of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._institute_code

    @institute_code.setter
    def institute_code(self, institute_code):
        """Sets the institute_code of this BrAPIv1GermplasmDTO.


        :param institute_code: The institute_code of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._institute_code = institute_code

    @property
    def institute_name(self):
        """Gets the institute_name of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The institute_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._institute_name

    @institute_name.setter
    def institute_name(self, institute_name):
        """Sets the institute_name of this BrAPIv1GermplasmDTO.


        :param institute_name: The institute_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._institute_name = institute_name

    @property
    def pedigree(self):
        """Gets the pedigree of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The pedigree of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._pedigree

    @pedigree.setter
    def pedigree(self, pedigree):
        """Sets the pedigree of this BrAPIv1GermplasmDTO.


        :param pedigree: The pedigree of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._pedigree = pedigree

    @property
    def seed_source(self):
        """Gets the seed_source of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The seed_source of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._seed_source

    @seed_source.setter
    def seed_source(self, seed_source):
        """Sets the seed_source of this BrAPIv1GermplasmDTO.


        :param seed_source: The seed_source of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._seed_source = seed_source

    @property
    def species_authority(self):
        """Gets the species_authority of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The species_authority of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._species_authority

    @species_authority.setter
    def species_authority(self, species_authority):
        """Sets the species_authority of this BrAPIv1GermplasmDTO.


        :param species_authority: The species_authority of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._species_authority = species_authority

    @property
    def subtaxa(self):
        """Gets the subtaxa of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The subtaxa of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._subtaxa

    @subtaxa.setter
    def subtaxa(self, subtaxa):
        """Sets the subtaxa of this BrAPIv1GermplasmDTO.


        :param subtaxa: The subtaxa of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._subtaxa = subtaxa

    @property
    def subtaxa_authority(self):
        """Gets the subtaxa_authority of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The subtaxa_authority of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._subtaxa_authority

    @subtaxa_authority.setter
    def subtaxa_authority(self, subtaxa_authority):
        """Sets the subtaxa_authority of this BrAPIv1GermplasmDTO.


        :param subtaxa_authority: The subtaxa_authority of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._subtaxa_authority = subtaxa_authority

    @property
    def synonyms(self):
        """Gets the synonyms of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The synonyms of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this BrAPIv1GermplasmDTO.


        :param synonyms: The synonyms of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: list[str]
        """

        self._synonyms = synonyms

    @property
    def taxon_ids(self):
        """Gets the taxon_ids of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The taxon_ids of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: list[object]
        """
        return self._taxon_ids

    @taxon_ids.setter
    def taxon_ids(self, taxon_ids):
        """Sets the taxon_ids of this BrAPIv1GermplasmDTO.


        :param taxon_ids: The taxon_ids of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: list[object]
        """

        self._taxon_ids = taxon_ids

    @property
    def source_name(self):
        """Gets the source_name of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The source_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this BrAPIv1GermplasmDTO.


        :param source_name: The source_name of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def taxon_id(self):
        """Gets the taxon_id of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The taxon_id of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: str
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id):
        """Sets the taxon_id of this BrAPIv1GermplasmDTO.


        :param taxon_id: The taxon_id of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: str
        """

        self._taxon_id = taxon_id

    @property
    def type_of_germplasm_storage_code(self):
        """Gets the type_of_germplasm_storage_code of this BrAPIv1GermplasmDTO.  # noqa: E501


        :return: The type_of_germplasm_storage_code of this BrAPIv1GermplasmDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._type_of_germplasm_storage_code

    @type_of_germplasm_storage_code.setter
    def type_of_germplasm_storage_code(self, type_of_germplasm_storage_code):
        """Sets the type_of_germplasm_storage_code of this BrAPIv1GermplasmDTO.


        :param type_of_germplasm_storage_code: The type_of_germplasm_storage_code of this BrAPIv1GermplasmDTO.  # noqa: E501
        :type: list[str]
        """

        self._type_of_germplasm_storage_code = type_of_germplasm_storage_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrAPIv1GermplasmDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(BrAPIv1GermplasmDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrAPIv1GermplasmDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
