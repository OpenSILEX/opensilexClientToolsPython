# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class OrcidRecordDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'orcid': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'emails': 'list[str]',
        'organizations': 'list[str]'
    }

    attribute_map = {
        'orcid': 'orcid',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'emails': 'emails',
        'organizations': 'organizations'
    }
    def __init__(self,
        orcid : 'str' = None,
        first_name : 'str' = None,
        last_name : 'str' = None,
        emails : 'List[str]' = None,
        organizations : 'List[str]' = None):  # noqa: E501
        """OrcidRecordDTO - a model defined in Swagger"""  # noqa: E501

        self._orcid = None
        self._first_name = None
        self._last_name = None
        self._emails = None
        self._organizations = None
        self.discriminator = None

        if orcid is not None:
            self.orcid = orcid
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if emails is not None:
            self.emails = emails
        if organizations is not None:
            self.organizations = organizations

    @property
    def orcid(self):
        """Gets the orcid of this OrcidRecordDTO.  # noqa: E501


        :return: The orcid of this OrcidRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """Sets the orcid of this OrcidRecordDTO.


        :param orcid: The orcid of this OrcidRecordDTO.  # noqa: E501
        :type: str
        """

        self._orcid = orcid

    @property
    def first_name(self):
        """Gets the first_name of this OrcidRecordDTO.  # noqa: E501


        :return: The first_name of this OrcidRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this OrcidRecordDTO.


        :param first_name: The first_name of this OrcidRecordDTO.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this OrcidRecordDTO.  # noqa: E501


        :return: The last_name of this OrcidRecordDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this OrcidRecordDTO.


        :param last_name: The last_name of this OrcidRecordDTO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def emails(self):
        """Gets the emails of this OrcidRecordDTO.  # noqa: E501


        :return: The emails of this OrcidRecordDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this OrcidRecordDTO.


        :param emails: The emails of this OrcidRecordDTO.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def organizations(self):
        """Gets the organizations of this OrcidRecordDTO.  # noqa: E501


        :return: The organizations of this OrcidRecordDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this OrcidRecordDTO.


        :param organizations: The organizations of this OrcidRecordDTO.  # noqa: E501
        :type: list[str]
        """

        self._organizations = organizations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrcidRecordDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(OrcidRecordDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrcidRecordDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
