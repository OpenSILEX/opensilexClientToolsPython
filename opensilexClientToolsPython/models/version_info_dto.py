# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class VersionInfoDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'version': 'str',
        'description': 'str',
        'contact': 'ApiContactInfoDTO',
        'license': 'ApiLicenseInfoDTO',
        'modules_version': 'list[ApiModulesInfo]',
        'external_docs': 'ApiExternalDocsDTO',
        'api_docs': 'ApiExternalDocsDTO',
        'git_commit': 'ApiGitCommitDTO',
        'github_page': 'str'
    }

    attribute_map = {
        'title': 'title',
        'version': 'version',
        'description': 'description',
        'contact': 'contact',
        'license': 'license',
        'modules_version': 'modules_version',
        'external_docs': 'external_docs',
        'api_docs': 'api_docs',
        'git_commit': 'git_commit',
        'github_page': 'github_page'
    }
    def __init__(self,
        title : 'str' = None,
        version : 'str' = None,
        description : 'str' = None,
        contact : 'ApiContactInfoDTO' = None,
        license : 'ApiLicenseInfoDTO' = None,
        modules_version : 'List[ApiModulesInfo]' = None,
        external_docs : 'ApiExternalDocsDTO' = None,
        api_docs : 'ApiExternalDocsDTO' = None,
        git_commit : 'ApiGitCommitDTO' = None,
        github_page : 'str' = None):  # noqa: E501
        """VersionInfoDTO - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._version = None
        self._description = None
        self._contact = None
        self._license = None
        self._modules_version = None
        self._external_docs = None
        self._api_docs = None
        self._git_commit = None
        self._github_page = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if version is not None:
            self.version = version
        if description is not None:
            self.description = description
        if contact is not None:
            self.contact = contact
        if license is not None:
            self.license = license
        if modules_version is not None:
            self.modules_version = modules_version
        if external_docs is not None:
            self.external_docs = external_docs
        if api_docs is not None:
            self.api_docs = api_docs
        if git_commit is not None:
            self.git_commit = git_commit
        if github_page is not None:
            self.github_page = github_page

    @property
    def title(self):
        """Gets the title of this VersionInfoDTO.  # noqa: E501

        Opensilex instance name  # noqa: E501

        :return: The title of this VersionInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VersionInfoDTO.

        Opensilex instance name  # noqa: E501

        :param title: The title of this VersionInfoDTO.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def version(self):
        """Gets the version of this VersionInfoDTO.  # noqa: E501

        Opensilex API version  # noqa: E501

        :return: The version of this VersionInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VersionInfoDTO.

        Opensilex API version  # noqa: E501

        :param version: The version of this VersionInfoDTO.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def description(self):
        """Gets the description of this VersionInfoDTO.  # noqa: E501

        Opensilex description  # noqa: E501

        :return: The description of this VersionInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VersionInfoDTO.

        Opensilex description  # noqa: E501

        :param description: The description of this VersionInfoDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def contact(self):
        """Gets the contact of this VersionInfoDTO.  # noqa: E501


        :return: The contact of this VersionInfoDTO.  # noqa: E501
        :rtype: ApiContactInfoDTO
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this VersionInfoDTO.


        :param contact: The contact of this VersionInfoDTO.  # noqa: E501
        :type: ApiContactInfoDTO
        """

        self._contact = contact

    @property
    def license(self):
        """Gets the license of this VersionInfoDTO.  # noqa: E501


        :return: The license of this VersionInfoDTO.  # noqa: E501
        :rtype: ApiLicenseInfoDTO
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this VersionInfoDTO.


        :param license: The license of this VersionInfoDTO.  # noqa: E501
        :type: ApiLicenseInfoDTO
        """

        self._license = license

    @property
    def modules_version(self):
        """Gets the modules_version of this VersionInfoDTO.  # noqa: E501


        :return: The modules_version of this VersionInfoDTO.  # noqa: E501
        :rtype: list[ApiModulesInfo]
        """
        return self._modules_version

    @modules_version.setter
    def modules_version(self, modules_version):
        """Sets the modules_version of this VersionInfoDTO.


        :param modules_version: The modules_version of this VersionInfoDTO.  # noqa: E501
        :type: list[ApiModulesInfo]
        """

        self._modules_version = modules_version

    @property
    def external_docs(self):
        """Gets the external_docs of this VersionInfoDTO.  # noqa: E501


        :return: The external_docs of this VersionInfoDTO.  # noqa: E501
        :rtype: ApiExternalDocsDTO
        """
        return self._external_docs

    @external_docs.setter
    def external_docs(self, external_docs):
        """Sets the external_docs of this VersionInfoDTO.


        :param external_docs: The external_docs of this VersionInfoDTO.  # noqa: E501
        :type: ApiExternalDocsDTO
        """

        self._external_docs = external_docs

    @property
    def api_docs(self):
        """Gets the api_docs of this VersionInfoDTO.  # noqa: E501


        :return: The api_docs of this VersionInfoDTO.  # noqa: E501
        :rtype: ApiExternalDocsDTO
        """
        return self._api_docs

    @api_docs.setter
    def api_docs(self, api_docs):
        """Sets the api_docs of this VersionInfoDTO.


        :param api_docs: The api_docs of this VersionInfoDTO.  # noqa: E501
        :type: ApiExternalDocsDTO
        """

        self._api_docs = api_docs

    @property
    def git_commit(self):
        """Gets the git_commit of this VersionInfoDTO.  # noqa: E501


        :return: The git_commit of this VersionInfoDTO.  # noqa: E501
        :rtype: ApiGitCommitDTO
        """
        return self._git_commit

    @git_commit.setter
    def git_commit(self, git_commit):
        """Sets the git_commit of this VersionInfoDTO.


        :param git_commit: The git_commit of this VersionInfoDTO.  # noqa: E501
        :type: ApiGitCommitDTO
        """

        self._git_commit = git_commit

    @property
    def github_page(self):
        """Gets the github_page of this VersionInfoDTO.  # noqa: E501


        :return: The github_page of this VersionInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._github_page

    @github_page.setter
    def github_page(self, github_page):
        """Sets the github_page of this VersionInfoDTO.


        :param github_page: The github_page of this VersionInfoDTO.  # noqa: E501
        :type: str
        """

        self._github_page = github_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VersionInfoDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(VersionInfoDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionInfoDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
