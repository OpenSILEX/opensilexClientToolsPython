# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from typing import List, Dict


class CSVURINotFoundError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_index': 'int',
        'col_index': 'int',
        'header': 'str',
        'value': 'str',
        'rdf_type': 'str',
        'object_uri': 'str',
        'message': 'str'
    }

    attribute_map = {
        'row_index': 'rowIndex',
        'col_index': 'colIndex',
        'header': 'header',
        'value': 'value',
        'rdf_type': 'rdfType',
        'object_uri': 'objectURI',
        'message': 'message'
    }
    def __init__(self,
        row_index : 'int' = None,
        col_index : 'int' = None,
        header : 'str' = None,
        value : 'str' = None,
        rdf_type : 'str' = None,
        object_uri : 'str' = None,
        message : 'str' = None):  # noqa: E501
        """CSVURINotFoundError - a model defined in Swagger"""  # noqa: E501

        self._row_index = None
        self._col_index = None
        self._header = None
        self._value = None
        self._rdf_type = None
        self._object_uri = None
        self._message = None
        self.discriminator = None

        if row_index is not None:
            self.row_index = row_index
        if col_index is not None:
            self.col_index = col_index
        if header is not None:
            self.header = header
        if value is not None:
            self.value = value
        if rdf_type is not None:
            self.rdf_type = rdf_type
        if object_uri is not None:
            self.object_uri = object_uri
        if message is not None:
            self.message = message

    @property
    def row_index(self):
        """Gets the row_index of this CSVURINotFoundError.  # noqa: E501


        :return: The row_index of this CSVURINotFoundError.  # noqa: E501
        :rtype: int
        """
        return self._row_index

    @row_index.setter
    def row_index(self, row_index):
        """Sets the row_index of this CSVURINotFoundError.


        :param row_index: The row_index of this CSVURINotFoundError.  # noqa: E501
        :type: int
        """

        self._row_index = row_index

    @property
    def col_index(self):
        """Gets the col_index of this CSVURINotFoundError.  # noqa: E501


        :return: The col_index of this CSVURINotFoundError.  # noqa: E501
        :rtype: int
        """
        return self._col_index

    @col_index.setter
    def col_index(self, col_index):
        """Sets the col_index of this CSVURINotFoundError.


        :param col_index: The col_index of this CSVURINotFoundError.  # noqa: E501
        :type: int
        """

        self._col_index = col_index

    @property
    def header(self):
        """Gets the header of this CSVURINotFoundError.  # noqa: E501


        :return: The header of this CSVURINotFoundError.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this CSVURINotFoundError.


        :param header: The header of this CSVURINotFoundError.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def value(self):
        """Gets the value of this CSVURINotFoundError.  # noqa: E501


        :return: The value of this CSVURINotFoundError.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CSVURINotFoundError.


        :param value: The value of this CSVURINotFoundError.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def rdf_type(self):
        """Gets the rdf_type of this CSVURINotFoundError.  # noqa: E501


        :return: The rdf_type of this CSVURINotFoundError.  # noqa: E501
        :rtype: str
        """
        return self._rdf_type

    @rdf_type.setter
    def rdf_type(self, rdf_type):
        """Sets the rdf_type of this CSVURINotFoundError.


        :param rdf_type: The rdf_type of this CSVURINotFoundError.  # noqa: E501
        :type: str
        """

        self._rdf_type = rdf_type

    @property
    def object_uri(self):
        """Gets the object_uri of this CSVURINotFoundError.  # noqa: E501


        :return: The object_uri of this CSVURINotFoundError.  # noqa: E501
        :rtype: str
        """
        return self._object_uri

    @object_uri.setter
    def object_uri(self, object_uri):
        """Sets the object_uri of this CSVURINotFoundError.


        :param object_uri: The object_uri of this CSVURINotFoundError.  # noqa: E501
        :type: str
        """

        self._object_uri = object_uri

    @property
    def message(self):
        """Gets the message of this CSVURINotFoundError.  # noqa: E501


        :return: The message of this CSVURINotFoundError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CSVURINotFoundError.


        :param message: The message of this CSVURINotFoundError.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CSVURINotFoundError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_api_formated_dict(self):
        """Returns a dict of properties as named in the API rather than in the model itself"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_api_formated_dict() if hasattr(x, "to_api_formated_dict") else x,
                    value
                ))
            elif hasattr(value, "to_api_formated_dict"):
                result[self.attribute_map[attr]] = value.to_api_formated_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_api_formated_dict())
                    if hasattr(item[1], "to_api_formated_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(CSVURINotFoundError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CSVURINotFoundError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
 

        
