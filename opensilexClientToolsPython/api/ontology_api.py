# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from typing import List
from opensilexClientToolsPython.models import *
from datetime import date
import inspect
from opensilexClientToolsPython.api_client import ApiClient


class OntologyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        
    def add_class_property_restriction(
        self,
        body : 'OWLClassPropertyRestrictionDTO' = None,
        **kwargs
    ):  # noqa: E501
        """Add a rdf type property restriction  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_class_property_restriction(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param OWLClassPropertyRestrictionDTO body: Property description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(body, OWLClassPropertyRestrictionDTO) and body != None:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `OWLClassPropertyRestrictionDTO`")
                 


        if kwargs.get('async_req'):
            return self.add_class_property_restriction_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.add_class_property_restriction_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def add_class_property_restriction_with_http_info(self, **kwargs):  # noqa: E501
        """Add a rdf type property restriction  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_class_property_restriction_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param OWLClassPropertyRestrictionDTO body: Property description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_class_property_restriction" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/rdf_type_property_restriction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def check_uris_types(
        self,
        rdf_types : 'List[str]',
        body : 'URIsListPostDTO' = None,
        **kwargs
    ):  # noqa: E501
        """Check the given rdf-types on the given uris  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_uris_types(rdf_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] rdf_types: rdf_types list you want to check on the given uris list (required)
        :param str authorization: Authentication token (required)
        :param URIsListPostDTO body: URIs list
        :param str accept_language: Request accepted language
        :return: list[URITypesDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["rdf_types", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if (not isinstance(rdf_types, list) or not isinstance(rdf_types[0], str)) and rdf_types != None:
            raise ValueError("Invalid value for parameter `rdf_types`. This parameter couldn't be cast to type `List[str]`")
             
        if not isinstance(body, URIsListPostDTO) and body != None:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `URIsListPostDTO`")
                 


        if kwargs.get('async_req'):
            return self.check_uris_types_with_http_info(rdf_types, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.check_uris_types_with_http_info(rdf_types, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def check_uris_types_with_http_info(self, rdf_types, **kwargs):  # noqa: E501
        """Check the given rdf-types on the given uris  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_uris_types_with_http_info(rdf_types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] rdf_types: rdf_types list you want to check on the given uris list (required)
        :param str authorization: Authentication token (required)
        :param URIsListPostDTO body: URIs list
        :param str accept_language: Request accepted language
        :return: list[URITypesDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rdf_types', 'body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_uris_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rdf_types' is set
        if ('rdf_types' not in params or
                params['rdf_types'] is None):
            raise ValueError("Missing the required parameter `rdf_types` when calling `check_uris_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rdf_types' in params:
            query_params.append(('rdf_types', params['rdf_types']))  # noqa: E501
            collection_formats['rdf_types'] = 'multi'  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/check_rdf_types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[URITypesDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def create_property(
        self,
        body : 'RDFPropertyDTO' = None,
        **kwargs
    ):  # noqa: E501
        """Create a RDF property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_property(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param RDFPropertyDTO body: Property description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(body, RDFPropertyDTO) and body != None:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `RDFPropertyDTO`")
                 


        if kwargs.get('async_req'):
            return self.create_property_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.create_property_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def create_property_with_http_info(self, **kwargs):  # noqa: E501
        """Create a RDF property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_property_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param RDFPropertyDTO body: Property description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_property" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/property', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def delete_class_property_restriction(
        self,
        rdf_type : 'str',
        property_uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Delete a rdf type property restriction  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_class_property_restriction(rdf_type, property_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rdf_type: RDF type (required)
        :param str property_uri: Property URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["rdf_type", "property_uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(rdf_type, str) and rdf_type != None:
            raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(property_uri, str) and property_uri != None:
            raise ValueError("Invalid value for parameter `property_uri`. This parameter couldn't be cast to type `str`")
             


        if kwargs.get('async_req'):
            return self.delete_class_property_restriction_with_http_info(rdf_type, property_uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_class_property_restriction_with_http_info(rdf_type, property_uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def delete_class_property_restriction_with_http_info(self, rdf_type, property_uri, **kwargs):  # noqa: E501
        """Delete a rdf type property restriction  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_class_property_restriction_with_http_info(rdf_type, property_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rdf_type: RDF type (required)
        :param str property_uri: Property URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rdf_type', 'property_uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_class_property_restriction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rdf_type' is set
        if ('rdf_type' not in params or
                params['rdf_type'] is None):
            raise ValueError("Missing the required parameter `rdf_type` when calling `delete_class_property_restriction`")  # noqa: E501
        # verify the required parameter 'property_uri' is set
        if ('property_uri' not in params or
                params['property_uri'] is None):
            raise ValueError("Missing the required parameter `property_uri` when calling `delete_class_property_restriction`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'property_uri' in params:
            query_params.append(('propertyURI', params['property_uri']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/rdf_type_property_restriction', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def delete_property(
        self,
        uri : 'str',
        rdf_type : 'str',
        **kwargs
    ):  # noqa: E501
        """Delete a property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_property(uri, rdf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Property URI (required)
        :param str rdf_type: Property type (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", "rdf_type", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(uri, str) and uri != None:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(rdf_type, str) and rdf_type != None:
            raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `str`")
             


        if kwargs.get('async_req'):
            return self.delete_property_with_http_info(uri, rdf_type, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_property_with_http_info(uri, rdf_type, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def delete_property_with_http_info(self, uri, rdf_type, **kwargs):  # noqa: E501
        """Delete a property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_property_with_http_info(uri, rdf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Property URI (required)
        :param str rdf_type: Property type (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'rdf_type', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `delete_property`")  # noqa: E501
        # verify the required parameter 'rdf_type' is set
        if ('rdf_type' not in params or
                params['rdf_type'] is None):
            raise ValueError("Missing the required parameter `rdf_type` when calling `delete_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/property', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_base_uri(
        self,
        **kwargs
    ):  # noqa: E501
        """Return base uri  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_base_uri(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        


        if kwargs.get('async_req'):
            return self.get_base_uri_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_base_uri_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_base_uri_with_http_info(self, **kwargs):  # noqa: E501
        """Return base uri  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_base_uri_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_base_uri" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/base_uri', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_classes(
        self,
        rdf_type : 'List[str]',
        parent_type : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Return classes models definitions with properties for a list of rdf types  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classes(rdf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] rdf_type: RDF classes URI (required)
        :param str authorization: Authentication token (required)
        :param str parent_type: Parent RDF class URI
        :param str accept_language: Request accepted language
        :return: list[RDFTypeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["rdf_type", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if (not isinstance(rdf_type, list) or not isinstance(rdf_type[0], str)) and rdf_type != None:
            raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `List[str]`")
             
        if not isinstance(parent_type, str) and parent_type != None:
            raise ValueError("Invalid value for parameter `parent_type`. This parameter couldn't be cast to type `str`")
                 


        if kwargs.get('async_req'):
            return self.get_classes_with_http_info(rdf_type, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_classes_with_http_info(rdf_type, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_classes_with_http_info(self, rdf_type, **kwargs):  # noqa: E501
        """Return classes models definitions with properties for a list of rdf types  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classes_with_http_info(rdf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] rdf_type: RDF classes URI (required)
        :param str authorization: Authentication token (required)
        :param str parent_type: Parent RDF class URI
        :param str accept_language: Request accepted language
        :return: list[RDFTypeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rdf_type', 'parent_type', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rdf_type' is set
        if ('rdf_type' not in params or
                params['rdf_type'] is None):
            raise ValueError("Missing the required parameter `rdf_type` when calling `get_classes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
            collection_formats['rdf_type'] = 'multi'  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parent_type', params['parent_type']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/rdf_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RDFTypeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_data_properties(
        self,
        domain : 'str' = None,
        name : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Search data properties tree  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str domain: Domain URI
        :param str name: Name regex pattern
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(domain, str) and domain != None:
            raise ValueError("Invalid value for parameter `domain`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(name, str) and name != None:
            raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str`")
                 


        if kwargs.get('async_req'):
            return self.get_data_properties_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_properties_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_data_properties_with_http_info(self, **kwargs):  # noqa: E501
        """Search data properties tree  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str domain: Domain URI
        :param str name: Name regex pattern
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'name', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'domain' in params:
            query_params.append(('domain', params['domain']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/data_properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceTreeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_linkable_properties(
        self,
        domain : 'str',
        parent : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Search properties linkable to a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_linkable_properties(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain URI (required)
        :param str authorization: Authentication token (required)
        :param str parent: Domain parent URI
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["domain", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(domain, str) and domain != None:
            raise ValueError("Invalid value for parameter `domain`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(parent, str) and parent != None:
            raise ValueError("Invalid value for parameter `parent`. This parameter couldn't be cast to type `str`")
                 


        if kwargs.get('async_req'):
            return self.get_linkable_properties_with_http_info(domain, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_linkable_properties_with_http_info(domain, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_linkable_properties_with_http_info(self, domain, **kwargs):  # noqa: E501
        """Search properties linkable to a domain  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_linkable_properties_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain URI (required)
        :param str authorization: Authentication token (required)
        :param str parent: Domain parent URI
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'parent', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_linkable_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `get_linkable_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'domain' in params:
            query_params.append(('domain', params['domain']))  # noqa: E501
        if 'parent' in params:
            query_params.append(('parent', params['parent']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/linkable_properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceTreeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_name_space(
        self,
        **kwargs
    ):  # noqa: E501
        """Return namespaces  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_name_space(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        


        if kwargs.get('async_req'):
            return self.get_name_space_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_name_space_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_name_space_with_http_info(self, **kwargs):  # noqa: E501
        """Return namespaces  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_name_space_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_name_space" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/name_space', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_object_properties(
        self,
        domain : 'str' = None,
        name : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Search object properties tree  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str domain: Domain URI
        :param str name: Name regex pattern
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(domain, str) and domain != None:
            raise ValueError("Invalid value for parameter `domain`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(name, str) and name != None:
            raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str`")
                 


        if kwargs.get('async_req'):
            return self.get_object_properties_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_properties_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_object_properties_with_http_info(self, **kwargs):  # noqa: E501
        """Search object properties tree  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str domain: Domain URI
        :param str name: Name regex pattern
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'name', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'domain' in params:
            query_params.append(('domain', params['domain']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/object_properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceTreeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_properties(
        self,
        domain : 'str',
        name : 'str' = None,
        include_sub_classes : 'bool' = None,
        **kwargs
    ):  # noqa: E501
        """Search properties tree  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_properties(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain URI (required)
        :param str authorization: Authentication token (required)
        :param str name: Name regex pattern
        :param bool include_sub_classes: Return all properties from sub-classes
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["domain", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(domain, str) and domain != None:
            raise ValueError("Invalid value for parameter `domain`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(name, str) and name != None:
            raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(include_sub_classes, bool) and include_sub_classes != None:
            raise ValueError("Invalid value for parameter `include_sub_classes`. This parameter couldn't be cast to type `bool`")
                 


        if kwargs.get('async_req'):
            return self.get_properties_with_http_info(domain, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_properties_with_http_info(domain, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_properties_with_http_info(self, domain, **kwargs):  # noqa: E501
        """Search properties tree  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_properties_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: Domain URI (required)
        :param str authorization: Authentication token (required)
        :param str name: Name regex pattern
        :param bool include_sub_classes: Return all properties from sub-classes
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'name', 'include_sub_classes', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `get_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'domain' in params:
            query_params.append(('domain', params['domain']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'include_sub_classes' in params:
            query_params.append(('include_sub_classes', params['include_sub_classes']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/properties/{domain}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceTreeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_properties_by_domain_hierarchy_using_restrictions(
        self,
        ancestor : 'str',
        children : 'List[str]',
        **kwargs
    ):  # noqa: E501
        """Get restrictions from some super-class domain to one lower down in the hierarchy, ordered by what domain they first appear in.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_properties_by_domain_hierarchy_using_restrictions(ancestor, children, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ancestor: Domain ancestor URI (required)
        :param list[str] children: Domain uris from types that have ancestor as an ancestor (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[PropertiesByDomainDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["ancestor", "children", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(ancestor, str) and ancestor != None:
            raise ValueError("Invalid value for parameter `ancestor`. This parameter couldn't be cast to type `str`")
             
        if (not isinstance(children, list) or not isinstance(children[0], str)) and children != None:
            raise ValueError("Invalid value for parameter `children`. This parameter couldn't be cast to type `List[str]`")
             


        if kwargs.get('async_req'):
            return self.get_properties_by_domain_hierarchy_using_restrictions_with_http_info(ancestor, children, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_properties_by_domain_hierarchy_using_restrictions_with_http_info(ancestor, children, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_properties_by_domain_hierarchy_using_restrictions_with_http_info(self, ancestor, children, **kwargs):  # noqa: E501
        """Get restrictions from some super-class domain to one lower down in the hierarchy, ordered by what domain they first appear in.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_properties_by_domain_hierarchy_using_restrictions_with_http_info(ancestor, children, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ancestor: Domain ancestor URI (required)
        :param list[str] children: Domain uris from types that have ancestor as an ancestor (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[PropertiesByDomainDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ancestor', 'children', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_properties_by_domain_hierarchy_using_restrictions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ancestor' is set
        if ('ancestor' not in params or
                params['ancestor'] is None):
            raise ValueError("Missing the required parameter `ancestor` when calling `get_properties_by_domain_hierarchy_using_restrictions`")  # noqa: E501
        # verify the required parameter 'children' is set
        if ('children' not in params or
                params['children'] is None):
            raise ValueError("Missing the required parameter `children` when calling `get_properties_by_domain_hierarchy_using_restrictions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ancestor' in params:
            query_params.append(('ancestor', params['ancestor']))  # noqa: E501
        if 'children' in params:
            query_params.append(('children', params['children']))  # noqa: E501
            collection_formats['children'] = 'multi'  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/domain_hierarchy_restrictions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PropertiesByDomainDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_property(
        self,
        uri : 'str' = None,
        rdf_type : 'str' = None,
        domain_rdf_type : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Return property model definition detail  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str uri: Property URI
        :param str rdf_type: Property type
        :param str domain_rdf_type: Property type
        :param str accept_language: Request accepted language
        :return: RDFPropertyGetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(uri, str) and uri != None:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(rdf_type, str) and rdf_type != None:
            raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(domain_rdf_type, str) and domain_rdf_type != None:
            raise ValueError("Invalid value for parameter `domain_rdf_type`. This parameter couldn't be cast to type `str`")
                 


        if kwargs.get('async_req'):
            return self.get_property_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_property_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_property_with_http_info(self, **kwargs):  # noqa: E501
        """Return property model definition detail  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str uri: Property URI
        :param str rdf_type: Property type
        :param str domain_rdf_type: Property type
        :param str accept_language: Request accepted language
        :return: RDFPropertyGetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'rdf_type', 'domain_rdf_type', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'domain_rdf_type' in params:
            query_params.append(('domain_rdf_type', params['domain_rdf_type']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/property', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RDFPropertyGetDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_rdf_type(
        self,
        rdf_type : 'str',
        parent_type : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Return class model definition with properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rdf_type(rdf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rdf_type: RDF type URI (required)
        :param str authorization: Authentication token (required)
        :param str parent_type: Parent RDF class URI
        :param str accept_language: Request accepted language
        :return: RDFTypeDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["rdf_type", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(rdf_type, str) and rdf_type != None:
            raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(parent_type, str) and parent_type != None:
            raise ValueError("Invalid value for parameter `parent_type`. This parameter couldn't be cast to type `str`")
                 


        if kwargs.get('async_req'):
            return self.get_rdf_type_with_http_info(rdf_type, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rdf_type_with_http_info(rdf_type, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_rdf_type_with_http_info(self, rdf_type, **kwargs):  # noqa: E501
        """Return class model definition with properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rdf_type_with_http_info(rdf_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rdf_type: RDF type URI (required)
        :param str authorization: Authentication token (required)
        :param str parent_type: Parent RDF class URI
        :param str accept_language: Request accepted language
        :return: RDFTypeDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rdf_type', 'parent_type', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rdf_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rdf_type' is set
        if ('rdf_type' not in params or
                params['rdf_type'] is None):
            raise ValueError("Missing the required parameter `rdf_type` when calling `get_rdf_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parent_type', params['parent_type']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/rdf_type', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RDFTypeDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_shared_resource_instances(
        self,
        **kwargs
    ):  # noqa: E501
        """Return the list of shared resource instances  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_resource_instances(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[SharedResourceInstanceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        


        if kwargs.get('async_req'):
            return self.get_shared_resource_instances_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shared_resource_instances_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_shared_resource_instances_with_http_info(self, **kwargs):  # noqa: E501
        """Return the list of shared resource instances  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_resource_instances_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[SharedResourceInstanceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shared_resource_instances" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/shared_resource_instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SharedResourceInstanceDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_sub_classes_of(
        self,
        parent_type : 'str' = None,
        ignore_root_classes : 'bool' = None,
        **kwargs
    ):  # noqa: E501
        """Search sub-classes tree of an RDF class  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_classes_of(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str parent_type: Parent RDF class URI
        :param bool ignore_root_classes: Flag to determine if only sub-classes must be include in result
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(parent_type, str) and parent_type != None:
            raise ValueError("Invalid value for parameter `parent_type`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(ignore_root_classes, bool) and ignore_root_classes != None:
            raise ValueError("Invalid value for parameter `ignore_root_classes`. This parameter couldn't be cast to type `bool`")
                 


        if kwargs.get('async_req'):
            return self.get_sub_classes_of_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sub_classes_of_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_sub_classes_of_with_http_info(self, **kwargs):  # noqa: E501
        """Search sub-classes tree of an RDF class  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_classes_of_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str parent_type: Parent RDF class URI
        :param bool ignore_root_classes: Flag to determine if only sub-classes must be include in result
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent_type', 'ignore_root_classes', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sub_classes_of" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parent_type' in params:
            query_params.append(('parent_type', params['parent_type']))  # noqa: E501
        if 'ignore_root_classes' in params:
            query_params.append(('ignoreRootClasses', params['ignore_root_classes']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/subclasses_of', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceTreeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_sub_properties_of(
        self,
        domain : 'str' = None,
        uri : 'str' = None,
        ignore_root_property : 'bool' = None,
        **kwargs
    ):  # noqa: E501
        """Return property list from a parent property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_properties_of(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str domain: Domain URI
        :param str uri: Property URI
        :param bool ignore_root_property: Flag to determine if only sub-properties must be included in result
        :param str accept_language: Request accepted language
        :return: list[ObjectNamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(domain, str) and domain != None:
            raise ValueError("Invalid value for parameter `domain`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(uri, str) and uri != None:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(ignore_root_property, bool) and ignore_root_property != None:
            raise ValueError("Invalid value for parameter `ignore_root_property`. This parameter couldn't be cast to type `bool`")
                 


        if kwargs.get('async_req'):
            return self.get_sub_properties_of_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sub_properties_of_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_sub_properties_of_with_http_info(self, **kwargs):  # noqa: E501
        """Return property list from a parent property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sub_properties_of_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str domain: Domain URI
        :param str uri: Property URI
        :param bool ignore_root_property: Flag to determine if only sub-properties must be included in result
        :param str accept_language: Request accepted language
        :return: list[ObjectNamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain', 'uri', 'ignore_root_property', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sub_properties_of" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'domain' in params:
            query_params.append(('domain', params['domain']))  # noqa: E501
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'ignore_root_property' in params:
            query_params.append(('ignoreRootProperty', params['ignore_root_property']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/subproperties_of', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ObjectNamedResourceDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_uri_label(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Return associated rdfs:label of an uri if exists  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_uri_label(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: URI to get label from (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(uri, str) and uri != None:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str`")
             


        if kwargs.get('async_req'):
            return self.get_uri_label_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_uri_label_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_uri_label_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Return associated rdfs:label of an uri if exists  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_uri_label_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: URI to get label from (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_uri_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_uri_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/uri_label', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_uri_labels_list(
        self,
        body : 'List[str]',
        context : 'str' = None,
        search_default : 'bool' = None,
        **kwargs
    ):  # noqa: E501
        """Return associated rdfs:label of uris if they exist  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_uri_labels_list(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: URIs to get label from (required)
        :param str authorization: Authentication token (required)
        :param str context: Context URI
        :param bool search_default: Look for all contexts if not present in specified context
        :param str accept_language: Request accepted language
        :return: list[NamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["body", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if (not isinstance(body, list) or not isinstance(body[0], str)) and body != None:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `List[str]`")
             
        if not isinstance(context, str) and context != None:
            raise ValueError("Invalid value for parameter `context`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(search_default, bool) and search_default != None:
            raise ValueError("Invalid value for parameter `search_default`. This parameter couldn't be cast to type `bool`")
                 


        if kwargs.get('async_req'):
            return self.get_uri_labels_list_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_uri_labels_list_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_uri_labels_list_with_http_info(self, body, **kwargs):  # noqa: E501
        """Return associated rdfs:label of uris if they exist  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_uri_labels_list_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: URIs to get label from (required)
        :param str authorization: Authentication token (required)
        :param str context: Context URI
        :param bool search_default: Look for all contexts if not present in specified context
        :param str accept_language: Request accepted language
        :return: list[NamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'context', 'search_default', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_uri_labels_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_uri_labels_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'context' in params:
            query_params.append(('context', params['context']))  # noqa: E501
        if 'search_default' in params:
            query_params.append(('searchDefault', params['search_default']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/uris_labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NamedResourceDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_uri_types(
        self,
        body : 'List[str]',
        **kwargs
    ):  # noqa: E501
        """Return all rdf types of an uri  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_uri_types(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: URIs to get types from (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[URITypesDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["body", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if (not isinstance(body, list) or not isinstance(body[0], str)) and body != None:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `List[str]`")
             


        if kwargs.get('async_req'):
            return self.get_uri_types_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_uri_types_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_uri_types_with_http_info(self, body, **kwargs):  # noqa: E501
        """Return all rdf types of an uri  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_uri_types_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: URIs to get types from (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[URITypesDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_uri_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_uri_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/uri_types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[URITypesDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def rename_uri(
        self,
        uri : 'str',
        new_uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Rename all occurrences of the given URI  # noqa: E501

        **This method should not be used unless you are fully understanding what you are doing, as it may have side-effects for external ontologies. Please note that occurrences of the URI will NOT be changed in the NoSQL database (MongoDB).**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_uri(uri, new_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The URI to rename (required)
        :param str new_uri: The new URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", "new_uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(uri, str) and uri != None:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(new_uri, str) and new_uri != None:
            raise ValueError("Invalid value for parameter `new_uri`. This parameter couldn't be cast to type `str`")
             


        if kwargs.get('async_req'):
            return self.rename_uri_with_http_info(uri, new_uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_uri_with_http_info(uri, new_uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def rename_uri_with_http_info(self, uri, new_uri, **kwargs):  # noqa: E501
        """Rename all occurrences of the given URI  # noqa: E501

        **This method should not be used unless you are fully understanding what you are doing, as it may have side-effects for external ontologies. Please note that occurrences of the URI will NOT be changed in the NoSQL database (MongoDB).**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_uri_with_http_info(uri, new_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: The URI to rename (required)
        :param str new_uri: The new URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'new_uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_uri" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `rename_uri`")  # noqa: E501
        # verify the required parameter 'new_uri' is set
        if ('new_uri' not in params or
                params['new_uri'] is None):
            raise ValueError("Missing the required parameter `new_uri` when calling `rename_uri`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'new_uri' in params:
            query_params.append(('newUri', params['new_uri']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/{uri}/rename', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def search_sub_classes_of(
        self,
        parent_type : 'str',
        name : 'str' = None,
        ignore_root_classes : 'bool' = None,
        **kwargs
    ):  # noqa: E501
        """Search sub-classes tree of an RDF class  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_sub_classes_of(parent_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_type: Parent RDF class URI (required)
        :param str authorization: Authentication token (required)
        :param str name: Name regex pattern
        :param bool ignore_root_classes: Flag to determine if only sub-classes must be include in result
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["parent_type", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(parent_type, str) and parent_type != None:
            raise ValueError("Invalid value for parameter `parent_type`. This parameter couldn't be cast to type `str`")
             
        if not isinstance(name, str) and name != None:
            raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str`")
                 
        if not isinstance(ignore_root_classes, bool) and ignore_root_classes != None:
            raise ValueError("Invalid value for parameter `ignore_root_classes`. This parameter couldn't be cast to type `bool`")
                 


        if kwargs.get('async_req'):
            return self.search_sub_classes_of_with_http_info(parent_type, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.search_sub_classes_of_with_http_info(parent_type, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def search_sub_classes_of_with_http_info(self, parent_type, **kwargs):  # noqa: E501
        """Search sub-classes tree of an RDF class  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_sub_classes_of_with_http_info(parent_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_type: Parent RDF class URI (required)
        :param str authorization: Authentication token (required)
        :param str name: Name regex pattern
        :param bool ignore_root_classes: Flag to determine if only sub-classes must be include in result
        :param str accept_language: Request accepted language
        :return: list[ResourceTreeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent_type', 'name', 'ignore_root_classes', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_sub_classes_of" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parent_type' is set
        if ('parent_type' not in params or
                params['parent_type'] is None):
            raise ValueError("Missing the required parameter `parent_type` when calling `search_sub_classes_of`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parent_type' in params:
            query_params.append(('parent_type', params['parent_type']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'ignore_root_classes' in params:
            query_params.append(('ignoreRootClasses', params['ignore_root_classes']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/subclasses_of/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceTreeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def update_class_property_restriction(
        self,
        body : 'OWLClassPropertyRestrictionDTO' = None,
        **kwargs
    ):  # noqa: E501
        """Update a rdf type property restriction  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_class_property_restriction(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param OWLClassPropertyRestrictionDTO body: Property description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(body, OWLClassPropertyRestrictionDTO) and body != None:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `OWLClassPropertyRestrictionDTO`")
                 


        if kwargs.get('async_req'):
            return self.update_class_property_restriction_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.update_class_property_restriction_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def update_class_property_restriction_with_http_info(self, **kwargs):  # noqa: E501
        """Update a rdf type property restriction  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_class_property_restriction_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param OWLClassPropertyRestrictionDTO body: Property description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_class_property_restriction" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/rdf_type_property_restriction', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def update_property(
        self,
        body : 'RDFPropertyDTO' = None,
        **kwargs
    ):  # noqa: E501
        """Update a RDF property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_property(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param RDFPropertyDTO body: Property description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if not isinstance(body, RDFPropertyDTO) and body != None:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `RDFPropertyDTO`")
                 


        if kwargs.get('async_req'):
            return self.update_property_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.update_property_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def update_property_with_http_info(self, **kwargs):  # noqa: E501
        """Update a RDF property  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_property_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param RDFPropertyDTO body: Property description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_property" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ontology/property', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
